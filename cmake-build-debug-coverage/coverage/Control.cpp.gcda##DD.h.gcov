        -:    0:Source:/home/yeawer/tree/DD.h
        -:    0:Graph:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/Control.cpp.gcno
        -:    0:Data:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/Control.cpp.gcda
        -:    0:Runs:1
        -:    1:#include<bits/stdc++.h>
        -:    2:#include"Node_DD.h"
        -:    3:#include"Random.h"
        -:    4:#pragma once
        -:    5:class DD {
        -:    6:public:
        -:    7:    Node_DD* root;
        -:    8:
        -:    9:    explicit DD() {
        -:   10:        root = nullptr;
        -:   11:    }
        -:   12:
        -:   13:    DD(DD const &other) {
        -:   14:        root = other.root;
        -:   15:    }
        -:   16:
        -:   17:    ~DD() {
        -:   18:        clear(root);
        -:   19:    }
        -:   20:
function _ZN2DD4FindEl called 33 returned 100% blocks executed 100%
       33:   21:    bool Find(int64_t val) {
       33:   22:        return Find(root, val);
       33:   22-block  0
call    0 returned 33
        -:   23:    }
        -:   24:
function _ZN2DD3AddEl called 33 returned 100% blocks executed 87%
       33:   25:    void Add(int64_t val) {
       33:   26:        if (Find(val)) {
       33:   26-block  0
call    0 returned 33
branch  1 taken 33 (fallthrough)
branch  2 taken 0 (throw)
       33:   26-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 26
        7:   27:            return;
        7:   27-block  0
        -:   28:        }
       26:   29:        auto* vertex = new Node_DD(val);
       26:   29-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:   29-block  1
call    3 returned 26
branch  4 taken 26 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   29-block  2
call    6 never executed
       26:   30:        auto[T_First, T_Second] = Split(root, vertex->val);
       26:   30-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:   30-block  1
call    3 returned 26
call    4 returned 26
       26:   31:        T_First = Merge(T_First, vertex);
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:   32:        root = Merge(T_First, T_Second);
       26:   32-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:   32-block  1
        -:   33:    }
        -:   34:
function _ZN2DD7Add_RndEi called 1 returned 100% blocks executed 100%
        1:   35:    void Add_Rnd(int32_t x) {
       34:   36:        for (int i = 0; i < x; ++i) {
        1:   36-block  0
       34:   36-block  1
branch  0 taken 33
branch  1 taken 1 (fallthrough)
       33:   37:            int rnd_num = static_cast<int>(get_random() % 100); // rand nums
       33:   37-block  0
call    0 returned 33
       33:   38:            Add(rnd_num);
call    0 returned 33
        -:   39:        }
        1:   40:    }
        -:   41:
        -:   42:    void Print() {
        -:   43:        Print(root);
        -:   44:    }
        -:   45:
        -:   46:private:
        -:   47:
        -:   48:    void clear(Node_DD* vertex) {
        -:   49:        if (vertex == nullptr) {
        -:   50:            return;
        -:   51:        }
        -:   52:        clear(vertex->left);
        -:   53:        clear(vertex->right);
        -:   54:        vertex = nullptr;
        -:   55:        delete vertex;
        -:   56:    }
        -:   57:
        -:   58:    void Print(Node_DD* vertex) {
        -:   59:        if (vertex == nullptr) {
        -:   60:            return;
        -:   61:        }
        -:   62:        Print(vertex->left);
        -:   63:        std::cout << vertex->val << ' ';
        -:   64:        Print(vertex->right);
        -:   65:    }
        -:   66:
function _ZN2DD4FindEP7Node_DDl called 159 returned 100% blocks executed 100%
      159:   67:    bool Find(Node_DD* vertex, int64_t key) {
      159:   68:        if (vertex == nullptr) {
      159:   68-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 133
       26:   69:            return false;
       26:   69-block  0
        -:   70:        }
      133:   71:        if (vertex->val == key) {
      133:   71-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 126
        7:   72:            return true;
        7:   72-block  0
        -:   73:        }
      126:   74:        if (key < vertex->val) {
      126:   74-block  0
branch  0 taken 55 (fallthrough)
branch  1 taken 71
       55:   75:            return Find(vertex->left, key);
       55:   75-block  0
call    0 returned 55
        -:   76:        } else {
       71:   77:            return Find(vertex->right, key);
       71:   77-block  0
call    0 returned 71
        -:   78:        }
        -:   79:    }
        -:   80:
function _ZN2DD5MergeEP7Node_DDS1_ called 159 returned 100% blocks executed 100%
      159:   81:    Node_DD* Merge(Node_DD* T_First, Node_DD* T_Second) {
      159:   82:        if (T_First == nullptr) {
      159:   82-block  0
branch  0 taken 29 (fallthrough)
branch  1 taken 130
       29:   83:            return T_Second;
       29:   83-block  0
        -:   84:        }
      130:   85:        if (T_Second == nullptr) {
      130:   85-block  0
branch  0 taken 23 (fallthrough)
branch  1 taken 107
       23:   86:            return T_First;
       23:   86-block  0
        -:   87:        }
      107:   88:        if (T_First->priority > T_Second->priority) {
      107:   88-block  0
branch  0 taken 69 (fallthrough)
branch  1 taken 38
       69:   89:            T_First->right = Merge(T_First->right, T_Second);
       69:   89-block  0
call    0 returned 69
       69:   90:            return T_First;
        -:   91:        } else {
       38:   92:            T_Second->left = Merge(T_First, T_Second->left);
       38:   92-block  0
call    0 returned 38
       38:   93:            return T_Second;
        -:   94:        }
        -:   95:    }
        -:   96:
function _ZN2DD5SplitEP7Node_DDl called 121 returned 100% blocks executed 94%
      121:   97:    std::pair<Node_DD*, Node_DD*> Split(Node_DD* T, int64_t key) {
      121:   98:        if (T == nullptr) {
      121:   98-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 95
       26:   99:            return {nullptr, nullptr};
       26:   99-block  0
call    0 returned 26
        -:  100:        }
       95:  101:        if (key <= T->val) {
       95:  101-block  0
branch  0 taken 46 (fallthrough)
branch  1 taken 49
       46:  102:            auto[T_First, T_Second] = Split(T->left, key);
       46:  102-block  0
call    0 returned 46
branch  1 taken 46 (fallthrough)
branch  2 taken 0 (throw)
       46:  102-block  1
call    3 returned 46
call    4 returned 46
       46:  103:            T->left = T_Second;
       46:  104:            return {T_First, T};
call    0 returned 46
        -:  105:        } else {
       49:  106:            auto[T_First, T_Second] = Split(T->right, key);
       49:  106-block  0
call    0 returned 49
branch  1 taken 49 (fallthrough)
branch  2 taken 0 (throw)
       49:  106-block  1
call    3 returned 49
call    4 returned 49
       49:  107:            T->right = T_First;
       49:  108:            return {T, T_Second};
call    0 returned 49
        -:  109:        }
        -:  110:    }
        -:  111:};
