        -:    0:Source:/home/yeawer/tree/FrontEnd.cpp
        -:    0:Graph:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/FrontEnd.cpp.gcno
        -:    0:Data:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/FrontEnd.cpp.gcda
        -:    0:Runs:1
        -:    1:#include"FrontEnd.h"
        -:    2:#include"Drawer.h"
        -:    3:using namespace std;
        -:    4:
        -:    5:RenderWindow MAIN_WINDOW::Main_Window_(VideoMode(WINDOW_W_, WINDOW_H_), "meow");
        -:    6:Vector2i MAIN_WINDOW::mouse_pos_;
        -:    7:
        -:    8:// options
        -:    9:PRINT_TREE_OPTIONS MAIN_WINDOW::PRINT_DD_OPTIONS_;
        -:   10:PRINT_TREE_OPTIONS MAIN_WINDOW::PRINT_AVL_OPTIONS;
        -:   11:PRINT_TREE_OPTIONS MAIN_WINDOW::PRINT_SPLAY_OPTIONS;
        -:   12:TREE_OPTIONS MAIN_WINDOW::DD_OPTIONS_;
        -:   13:TREE_OPTIONS MAIN_WINDOW::AVL_OPTIONS_;
        -:   14:// tree
        -:   15:DD MAIN_WINDOW::DD_TREE_;
        -:   16:AVL MAIN_WINDOW::AVL_TREE_;
        -:   17:float MAIN_WINDOW::zoom_ = 1.f;
        -:   18:MAIN_WINDOW::which_window_ MAIN_WINDOW::type_ = MAIN_WINDOW::which_window_::DD_TREE;
        -:   19:sf::Font MAIN_WINDOW::User_Font_;
        -:   20:sf::Text MAIN_WINDOW::User_Text_;
        -:   21:VERTEX<Node_DD>* MAIN_WINDOW::DD_DRAW_TREE_;
        -:   22:VERTEX<Node_AVL>* MAIN_WINDOW::AVL_DRAW_TREE_;
        -:   23:
function _ZN11MAIN_WINDOWC2Ev called 1 returned 100% blocks executed 62%
        1:   24:MAIN_WINDOW::MAIN_WINDOW() :
        1:   25:        click_(click_type_::EMPTY) {
        1:   26:    User_Font_.loadFromFile("/home/yeawer/tree/Hack-Bold.ttf");
        1:   26-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   26-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   26-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:   26-block  3
call    9 never executed
    $$$$$:   26-block  4
    $$$$$:   26-block  5
call   10 never executed
        1:   27:    User_Text_.setFont(User_Font_);
call    0 returned 1
        1:   28:}
        -:   29:
        -:   30:template<typename vertex_type> void MAIN_WINDOW::InOrder_Add_X
        -:   31:(VERTEX<vertex_type> *vertex, int32_t add) noexcept {
        -:   32:    if (vertex == nullptr) {
        -:   33:        return;
        -:   34:    }
        -:   35:    InOrder_Add_X<vertex_type>(vertex->left, add);
        -:   36:    vertex->coords.first += float(add);
        -:   37:    InOrder_Add_X<vertex_type>(vertex->right, add);
        -:   38:}
        -:   39:
        -:   40:template<typename vertex_type> void MAIN_WINDOW::InOrder_Add_Y
        -:   41:(VERTEX<vertex_type>* vertex, int32_t add) noexcept {
        -:   42:    if (vertex == nullptr) {
        -:   43:        return;
        -:   44:    }
        -:   45:    InOrder_Add_Y<vertex_type>(vertex->left, add);
        -:   46:    vertex->coords.second += float(add);
        -:   47:    InOrder_Add_Y<vertex_type>(vertex->right, add);
        -:   48:}
        -:   49:
       2*:   50:template<typename vertex_type> VERTEX<vertex_type>* MAIN_WINDOW::FindVertex
        -:   51:(VERTEX<vertex_type>* vertex) noexcept {
       2*:   52:    float FIRST = 0;
       2*:   53:    float SECOND = 0;
       2*:   54:    float zoom = 1.f;
       2*:   55:    if (type_ == which_window_::DD_TREE) {
    #####:   56:        FIRST = (vertex->coords.first + PRINT_DD_OPTIONS_.cnt_x  + vertex->radius) /
    #####:   57:                PRINT_DD_OPTIONS_.zoom;
    #####:   58:        SECOND = (vertex->coords.second + PRINT_DD_OPTIONS_.cnt_y + vertex->radius) /
    #####:   59:                PRINT_DD_OPTIONS_.zoom;
    #####:   60:        zoom = PRINT_DD_OPTIONS_.zoom;
       2*:   61:    } else if (type_ == which_window_::AVL_TREE) {
       2*:   62:        FIRST = (vertex->coords.first + PRINT_AVL_OPTIONS.cnt_x + vertex->radius) /
       2*:   63:                PRINT_AVL_OPTIONS.zoom;
       2*:   64:        SECOND = (vertex->coords.second + PRINT_AVL_OPTIONS.cnt_y  + vertex->radius) /
       2*:   65:                PRINT_AVL_OPTIONS.zoom;
       2*:   66:        zoom = PRINT_AVL_OPTIONS.zoom;
        -:   67:    }
       2*:   68:    float dist = sqrt((float(mouse_pos_.x) - FIRST) *
       2*:   69:                      (float(mouse_pos_.x) - FIRST) +
       2*:   70:                      (float(mouse_pos_.y) - SECOND) *
       2*:   71:                      (float(mouse_pos_.y) - SECOND));
       2*:   72:    if (dist <= vertex->radius / zoom) {
       2*:   73:        return vertex;
        -:   74:    }
    #####:   75:    VERTEX<vertex_type>* ans1 = nullptr;
    #####:   76:    VERTEX<vertex_type>* ans2 = nullptr;
    #####:   77:    if (vertex->left != nullptr) {
    #####:   78:        ans1 = FindVertex(vertex->left);
        -:   79:    }
    #####:   80:    if (vertex->right != nullptr) {
    #####:   81:        ans2 = FindVertex(vertex->right);
        -:   82:    }
    #####:   83:    if (ans1 == nullptr && ans2 == nullptr) {
    #####:   84:        return nullptr;
        -:   85:    }
    #####:   86:    if (ans1 != nullptr) {
    #####:   87:        return ans1;
        -:   88:    }
    #####:   89:    return ans2;
        -:   90:}
------------------
_ZN11MAIN_WINDOW10FindVertexI8Node_AVLEEP6VERTEXIT_ES5_:
function _ZN11MAIN_WINDOW10FindVertexI8Node_AVLEEP6VERTEXIT_ES5_ called 2 returned 100% blocks executed 39%
        2:   50:template<typename vertex_type> VERTEX<vertex_type>* MAIN_WINDOW::FindVertex
        -:   51:(VERTEX<vertex_type>* vertex) noexcept {
        2:   52:    float FIRST = 0;
        2:   53:    float SECOND = 0;
        2:   54:    float zoom = 1.f;
        2:   55:    if (type_ == which_window_::DD_TREE) {
        2:   55-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   56:        FIRST = (vertex->coords.first + PRINT_DD_OPTIONS_.cnt_x  + vertex->radius) /
    #####:   57:                PRINT_DD_OPTIONS_.zoom;
    #####:   58:        SECOND = (vertex->coords.second + PRINT_DD_OPTIONS_.cnt_y + vertex->radius) /
    #####:   59:                PRINT_DD_OPTIONS_.zoom;
    #####:   60:        zoom = PRINT_DD_OPTIONS_.zoom;
    %%%%%:   60-block  0
        2:   61:    } else if (type_ == which_window_::AVL_TREE) {
        2:   61-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   62:        FIRST = (vertex->coords.first + PRINT_AVL_OPTIONS.cnt_x + vertex->radius) /
        2:   63:                PRINT_AVL_OPTIONS.zoom;
        2:   64:        SECOND = (vertex->coords.second + PRINT_AVL_OPTIONS.cnt_y  + vertex->radius) /
        2:   65:                PRINT_AVL_OPTIONS.zoom;
        2:   66:        zoom = PRINT_AVL_OPTIONS.zoom;
        2:   66-block  0
        -:   67:    }
        2:   68:    float dist = sqrt((float(mouse_pos_.x) - FIRST) *
        2:   69:                      (float(mouse_pos_.x) - FIRST) +
        2:   70:                      (float(mouse_pos_.y) - SECOND) *
        2:   71:                      (float(mouse_pos_.y) - SECOND));
        2:   71-block  0
call    0 returned 2
        2:   72:    if (dist <= vertex->radius / zoom) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   73:        return vertex;
        2:   73-block  0
        -:   74:    }
    #####:   75:    VERTEX<vertex_type>* ans1 = nullptr;
    #####:   76:    VERTEX<vertex_type>* ans2 = nullptr;
    #####:   77:    if (vertex->left != nullptr) {
    %%%%%:   77-block  0
branch  0 never executed
branch  1 never executed
    #####:   78:        ans1 = FindVertex(vertex->left);
    %%%%%:   78-block  0
call    0 never executed
        -:   79:    }
    #####:   80:    if (vertex->right != nullptr) {
    %%%%%:   80-block  0
branch  0 never executed
branch  1 never executed
    #####:   81:        ans2 = FindVertex(vertex->right);
    %%%%%:   81-block  0
call    0 never executed
        -:   82:    }
    #####:   83:    if (ans1 == nullptr && ans2 == nullptr) {
    %%%%%:   83-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   83-block  1
branch  2 never executed
branch  3 never executed
    #####:   84:        return nullptr;
    %%%%%:   84-block  0
        -:   85:    }
    #####:   86:    if (ans1 != nullptr) {
    %%%%%:   86-block  0
branch  0 never executed
branch  1 never executed
    #####:   87:        return ans1;
    %%%%%:   87-block  0
        -:   88:    }
    #####:   89:    return ans2;
    %%%%%:   89-block  0
        -:   90:}
------------------
_ZN11MAIN_WINDOW10FindVertexI7Node_DDEEP6VERTEXIT_ES5_:
function _ZN11MAIN_WINDOW10FindVertexI7Node_DDEEP6VERTEXIT_ES5_ called 0 returned 0% blocks executed 0%
    #####:   50:template<typename vertex_type> VERTEX<vertex_type>* MAIN_WINDOW::FindVertex
        -:   51:(VERTEX<vertex_type>* vertex) noexcept {
    #####:   52:    float FIRST = 0;
    #####:   53:    float SECOND = 0;
    #####:   54:    float zoom = 1.f;
    #####:   55:    if (type_ == which_window_::DD_TREE) {
    %%%%%:   55-block  0
branch  0 never executed
branch  1 never executed
    #####:   56:        FIRST = (vertex->coords.first + PRINT_DD_OPTIONS_.cnt_x  + vertex->radius) /
    #####:   57:                PRINT_DD_OPTIONS_.zoom;
    #####:   58:        SECOND = (vertex->coords.second + PRINT_DD_OPTIONS_.cnt_y + vertex->radius) /
    #####:   59:                PRINT_DD_OPTIONS_.zoom;
    #####:   60:        zoom = PRINT_DD_OPTIONS_.zoom;
    %%%%%:   60-block  0
    #####:   61:    } else if (type_ == which_window_::AVL_TREE) {
    %%%%%:   61-block  0
branch  0 never executed
branch  1 never executed
    #####:   62:        FIRST = (vertex->coords.first + PRINT_AVL_OPTIONS.cnt_x + vertex->radius) /
    #####:   63:                PRINT_AVL_OPTIONS.zoom;
    #####:   64:        SECOND = (vertex->coords.second + PRINT_AVL_OPTIONS.cnt_y  + vertex->radius) /
    #####:   65:                PRINT_AVL_OPTIONS.zoom;
    #####:   66:        zoom = PRINT_AVL_OPTIONS.zoom;
    %%%%%:   66-block  0
        -:   67:    }
    #####:   68:    float dist = sqrt((float(mouse_pos_.x) - FIRST) *
    #####:   69:                      (float(mouse_pos_.x) - FIRST) +
    #####:   70:                      (float(mouse_pos_.y) - SECOND) *
    #####:   71:                      (float(mouse_pos_.y) - SECOND));
    %%%%%:   71-block  0
call    0 never executed
    #####:   72:    if (dist <= vertex->radius / zoom) {
branch  0 never executed
branch  1 never executed
    #####:   73:        return vertex;
    %%%%%:   73-block  0
        -:   74:    }
    #####:   75:    VERTEX<vertex_type>* ans1 = nullptr;
    #####:   76:    VERTEX<vertex_type>* ans2 = nullptr;
    #####:   77:    if (vertex->left != nullptr) {
    %%%%%:   77-block  0
branch  0 never executed
branch  1 never executed
    #####:   78:        ans1 = FindVertex(vertex->left);
    %%%%%:   78-block  0
call    0 never executed
        -:   79:    }
    #####:   80:    if (vertex->right != nullptr) {
    %%%%%:   80-block  0
branch  0 never executed
branch  1 never executed
    #####:   81:        ans2 = FindVertex(vertex->right);
    %%%%%:   81-block  0
call    0 never executed
        -:   82:    }
    #####:   83:    if (ans1 == nullptr && ans2 == nullptr) {
    %%%%%:   83-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   83-block  1
branch  2 never executed
branch  3 never executed
    #####:   84:        return nullptr;
    %%%%%:   84-block  0
        -:   85:    }
    #####:   86:    if (ans1 != nullptr) {
    %%%%%:   86-block  0
branch  0 never executed
branch  1 never executed
    #####:   87:        return ans1;
    %%%%%:   87-block  0
        -:   88:    }
    #####:   89:    return ans2;
    %%%%%:   89-block  0
        -:   90:}
------------------
        -:   91:
       2*:   92:template<typename vertex_type> VERTEX<vertex_type>* MAIN_WINDOW::Which_Vertex(VERTEX<vertex_type>* TREE) noexcept {
       2*:   93:    VERTEX<vertex_type>* res = FindVertex(TREE); // res maybe nullptr
       2*:   94:    if (res != nullptr) {
       2*:   95:        cout << "------------------------------------------\n";
       2*:   96:        cout << "value: " << res->real_vertex->val << '\n';
       2*:   97:        cout << "height: " << res->real_vertex->param.height << '\n';
       2*:   98:        cout << "posX: " << res->real_vertex->param.posX << '\n';
       2*:   99:        cout << "sdv: " << res->real_vertex->param.sdv << '\n';
       2*:  100:        cout << "left posX: " << res->real_vertex->param.L << '\n';
       2*:  101:        cout << "right posX: " << res->real_vertex->param.R << '\n';
       2*:  102:        cout << "------------------------------------------\n";
        -:  103:    }
       2*:  104:    return res;
        -:  105:}
------------------
_ZN11MAIN_WINDOW12Which_VertexI8Node_AVLEEP6VERTEXIT_ES5_:
function _ZN11MAIN_WINDOW12Which_VertexI8Node_AVLEEP6VERTEXIT_ES5_ called 2 returned 100% blocks executed 100%
        2:   92:template<typename vertex_type> VERTEX<vertex_type>* MAIN_WINDOW::Which_Vertex(VERTEX<vertex_type>* TREE) noexcept {
        2:   93:    VERTEX<vertex_type>* res = FindVertex(TREE); // res maybe nullptr
        2:   93-block  0
call    0 returned 2
        2:   94:    if (res != nullptr) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   95:        cout << "------------------------------------------\n";
        2:   95-block  0
call    0 returned 2
        2:   96:        cout << "value: " << res->real_vertex->val << '\n';
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:   97:        cout << "height: " << res->real_vertex->param.height << '\n';
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:   98:        cout << "posX: " << res->real_vertex->param.posX << '\n';
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:   99:        cout << "sdv: " << res->real_vertex->param.sdv << '\n';
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:  100:        cout << "left posX: " << res->real_vertex->param.L << '\n';
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:  101:        cout << "right posX: " << res->real_vertex->param.R << '\n';
call    0 returned 2
call    1 returned 2
call    2 returned 2
        2:  102:        cout << "------------------------------------------\n";
call    0 returned 2
        -:  103:    }
        2:  104:    return res;
        2:  104-block  0
        -:  105:}
------------------
_ZN11MAIN_WINDOW12Which_VertexI7Node_DDEEP6VERTEXIT_ES5_:
function _ZN11MAIN_WINDOW12Which_VertexI7Node_DDEEP6VERTEXIT_ES5_ called 0 returned 0% blocks executed 0%
    #####:   92:template<typename vertex_type> VERTEX<vertex_type>* MAIN_WINDOW::Which_Vertex(VERTEX<vertex_type>* TREE) noexcept {
    #####:   93:    VERTEX<vertex_type>* res = FindVertex(TREE); // res maybe nullptr
    %%%%%:   93-block  0
call    0 never executed
    #####:   94:    if (res != nullptr) {
branch  0 never executed
branch  1 never executed
    #####:   95:        cout << "------------------------------------------\n";
    %%%%%:   95-block  0
call    0 never executed
    #####:   96:        cout << "value: " << res->real_vertex->val << '\n';
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   97:        cout << "height: " << res->real_vertex->param.height << '\n';
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   98:        cout << "posX: " << res->real_vertex->param.posX << '\n';
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   99:        cout << "sdv: " << res->real_vertex->param.sdv << '\n';
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  100:        cout << "left posX: " << res->real_vertex->param.L << '\n';
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  101:        cout << "right posX: " << res->real_vertex->param.R << '\n';
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  102:        cout << "------------------------------------------\n";
call    0 never executed
        -:  103:    }
    #####:  104:    return res;
    %%%%%:  104-block  0
        -:  105:}
------------------
        -:  106:
function _ZN11MAIN_WINDOW6EventsEv called 24129 returned 100% blocks executed 83%
    24129:  107:void MAIN_WINDOW::Events() {
    24661:  108:    while (Main_Window_.pollEvent(Main_Event_)) {
    24129:  108-block  0
    24661:  108-block  1
call    0 returned 24661
branch  1 taken 532
branch  2 taken 24129 (fallthrough)
     1064:  109:        if (Main_Event_.type == Event::Closed ||
      532:  109-block  0
branch  0 taken 532 (fallthrough)
branch  1 taken 0
        1:  109-block  1
      531:  109-block  2
      532:  109-block  3
branch  2 taken 1 (fallthrough)
branch  3 taken 531
      532:  110:            Main_Event_.type == Event::KeyPressed &&
      532:  110-block  0
branch  0 taken 86 (fallthrough)
branch  1 taken 446
       86:  111:            Keyboard::isKeyPressed(Keyboard::Escape)) {
       86:  111-block  0
call    0 returned 86
branch  1 taken 1 (fallthrough)
branch  2 taken 85
        1:  112:            Main_Window_.close();
        1:  112-block  0
call    0 returned 1
      531:  113:        } else if (Main_Event_.type == Event::MouseButtonPressed) { // click
      531:  113-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 529
        2:  114:            if (Mouse::isButtonPressed(Mouse::Left)) {
        2:  114-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:  115:                click_ = click_type_::LEFT;
        1:  116:                mouse_pos_ = Mouse::getPosition(Main_Window_);
        1:  116-block  0
call    0 returned 1
        1:  117:            } else if (Mouse::isButtonPressed(Mouse::Right)) {
        1:  117-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  118:                click_ = click_type_::RIGHT;
        1:  119:                mouse_pos_ = Mouse::getPosition(Main_Window_);
        1:  119-block  0
call    0 returned 1
        -:  120:            }
      529:  121:        } else if (Main_Event_.type == Event::KeyPressed) {
      529:  121-block  0
branch  0 taken 85 (fallthrough)
branch  1 taken 444
       85:  122:            if (Keyboard::isKeyPressed(Keyboard::Num1)) { // add one num
       85:  122-block  0
call    0 returned 85
branch  1 taken 0 (fallthrough)
branch  2 taken 85
    #####:  123:                Control::Nums_Control::NUM1();
    %%%%%:  123-block  0
call    0 never executed
       85:  124:            } else if (Keyboard::isKeyPressed(sf::Keyboard::Num2)) { // add x nums
       85:  124-block  0
call    0 returned 85
branch  1 taken 2 (fallthrough)
branch  2 taken 83
        2:  125:                Control::Nums_Control::NUM2();
        2:  125-block  0
call    0 returned 2
       83:  126:            }  else if (Keyboard::isKeyPressed(sf::Keyboard::Num3)) {
       83:  126-block  0
call    0 returned 83
branch  1 taken 0 (fallthrough)
branch  2 taken 83
    #####:  127:                Control::Nums_Control::NUM3();
    %%%%%:  127-block  0
call    0 never executed
       83:  128:            } else if (Keyboard::isKeyPressed(sf::Keyboard::Num4)) {
       83:  128-block  0
call    0 returned 83
branch  1 taken 1 (fallthrough)
branch  2 taken 82
        1:  129:                Control::Nums_Control::NUM4();
        1:  129-block  0
call    0 returned 1
       82:  130:            } else if (Keyboard::isKeyPressed(Keyboard::W)) {
       82:  130-block  0
call    0 returned 82
branch  1 taken 3 (fallthrough)
branch  2 taken 79
        3:  131:                Control::WASD_Control::MOVE_UP();
        3:  131-block  0
call    0 returned 3
       79:  132:            } else if (Keyboard::isKeyPressed(Keyboard::S)) {
       79:  132-block  0
call    0 returned 79
branch  1 taken 0 (fallthrough)
branch  2 taken 79
    #####:  133:                Control::WASD_Control::MOVE_DOWN();
    %%%%%:  133-block  0
call    0 never executed
       79:  134:            } else if (Keyboard::isKeyPressed(Keyboard::A)) {
       79:  134-block  0
call    0 returned 79
branch  1 taken 43 (fallthrough)
branch  2 taken 36
       43:  135:                Control::WASD_Control::MOVE_LEFT();
       43:  135-block  0
call    0 returned 43
       36:  136:            } else if (Keyboard::isKeyPressed(Keyboard::D)) {
       36:  136-block  0
call    0 returned 36
branch  1 taken 33 (fallthrough)
branch  2 taken 3
       33:  137:                Control::WASD_Control::MOVE_RIGHT();
       33:  137-block  0
call    0 returned 33
        3:  138:            } else if (Keyboard::isKeyPressed(Keyboard::Left)) {
        3:  138-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:  139:                Control::Arrow_Control::MOVE_LEFT();
    %%%%%:  139-block  0
call    0 never executed
        3:  140:            } else if (Keyboard::isKeyPressed(Keyboard::Right)) {
        3:  140-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:  141:                Control::Arrow_Control::MOVE_RIGHT();
    %%%%%:  141-block  0
call    0 never executed
        3:  142:            } else if (Keyboard::isKeyPressed(Keyboard::Down)) {
        3:  142-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:  143:                Control::Arrow_Control::MOVE_DOWN();
    %%%%%:  143-block  0
call    0 never executed
        3:  144:            } else if (Keyboard::isKeyPressed(Keyboard::Up)) {
        3:  144-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:  145:                Control::Arrow_Control::MOVE_UP();
    %%%%%:  145-block  0
call    0 never executed
        3:  146:            } else if (Keyboard::isKeyPressed(Keyboard::Delete)) {
        3:  146-block  0
call    0 returned 3
        -:  147:                // get all blue
        -:  148:            }
      444:  149:        } else if (Main_Event_.type == sf::Event::MouseWheelMoved) {
      444:  149-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 444
    #####:  150:            if (Main_Event_.mouseWheel.delta == -1) {
    %%%%%:  150-block  0
branch  0 never executed
branch  1 never executed
    #####:  151:                Control::Mouse_Control::MOVE_DOWN();
    %%%%%:  151-block  0
call    0 never executed
    #####:  152:            } else if (Main_Event_.mouseWheel.delta == 1) {
    %%%%%:  152-block  0
branch  0 never executed
branch  1 never executed
    #####:  153:                Control::Mouse_Control::MOVE_UP();
    %%%%%:  153-block  0
call    0 never executed
        -:  154:            }
        -:  155:        }
        -:  156:    }
    24129:  157:}
        -:  158:
function _ZN11MAIN_WINDOW7ProcessEv called 1 returned 100% blocks executed 80%
        1:  159:void MAIN_WINDOW::Process() {
    24130:  160:    while (Main_Window_.isOpen()) {
        1:  160-block  0
    24130:  160-block  1
call    0 returned 24130
branch  1 taken 24129
branch  2 taken 1 (fallthrough)
    24129:  161:        Events();
    24129:  161-block  0
call    0 returned 24129
    24129:  162:        if (click_ == click_type_::LEFT) {
branch  0 taken 1 (fallthrough)
branch  1 taken 24128
        1:  163:            if (type_ == which_window_::DD_TREE) {
        1:  163-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  164:                LEFT_CLICK<Node_DD>(DD_DRAW_TREE_);
    %%%%%:  164-block  0
call    0 never executed
        1:  165:            } else if (type_ == which_window_::AVL_TREE) {
        1:  165-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  166:                LEFT_CLICK<Node_AVL>(AVL_DRAW_TREE_);
        1:  166-block  0
call    0 returned 1
    #####:  167:            } else if (type_ == which_window_::SPLAY_TREE) {
    %%%%%:  167-block  0
        -:  168:
        -:  169:            }
        1:  170:            click_ = click_type_::EMPTY;
        1:  170-block  0
    24128:  171:        } else if (click_ == click_type_::RIGHT) {
    24128:  171-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 24127
        1:  172:            if (type_ == which_window_::DD_TREE) {
        1:  172-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  173:                RIGHT_CLICK<Node_DD>(DD_DRAW_TREE_);
    %%%%%:  173-block  0
call    0 never executed
        1:  174:            } else if (type_ == which_window_::AVL_TREE) {
        1:  174-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  175:                RIGHT_CLICK<Node_AVL>(AVL_DRAW_TREE_);
        1:  175-block  0
call    0 returned 1
    #####:  176:            } else if (type_ == which_window_::SPLAY_TREE) {
    %%%%%:  176-block  0
        -:  177:                //
        -:  178:            }
        1:  179:            click_ = click_type_::EMPTY;
        1:  179-block  0
        -:  180:        }
    24129:  181:        Drawer::Draw();
    24129:  181-block  0
call    0 returned 24129
        -:  182:    }
        1:  183:}
        -:  184:
        -:  185:template<typename vertex_type>
       1*:  186:void MAIN_WINDOW::LEFT_CLICK(VERTEX<vertex_type>* TREE) noexcept {
       1*:  187:    VERTEX<vertex_type>* res = MAIN_WINDOW::Which_Vertex<vertex_type>(TREE);
       1*:  188:    if (res != nullptr) {
       1*:  189:        if (res->COLOR == Color::Blue) {
    #####:  190:            res->COLOR = Color::Red;
    #####:  191:            res->real_vertex->param.COLOR = Color::Red;
        -:  192:        } else {
       1*:  193:            res->COLOR = Color::Blue;
       1*:  194:            res->real_vertex->param.COLOR = Color::Blue;
        -:  195:        }
        -:  196:    }
       1*:  197:}
------------------
_ZN11MAIN_WINDOW10LEFT_CLICKI8Node_AVLEEvP6VERTEXIT_E:
function _ZN11MAIN_WINDOW10LEFT_CLICKI8Node_AVLEEvP6VERTEXIT_E called 1 returned 100% blocks executed 86%
        1:  186:void MAIN_WINDOW::LEFT_CLICK(VERTEX<vertex_type>* TREE) noexcept {
        1:  187:    VERTEX<vertex_type>* res = MAIN_WINDOW::Which_Vertex<vertex_type>(TREE);
        1:  187-block  0
call    0 returned 1
        1:  188:    if (res != nullptr) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  189:        if (res->COLOR == Color::Blue) {
        1:  189-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  190:            res->COLOR = Color::Red;
    #####:  191:            res->real_vertex->param.COLOR = Color::Red;
    %%%%%:  191-block  0
        -:  192:        } else {
        1:  193:            res->COLOR = Color::Blue;
        1:  194:            res->real_vertex->param.COLOR = Color::Blue;
        1:  194-block  0
        -:  195:        }
        -:  196:    }
        1:  197:}
------------------
_ZN11MAIN_WINDOW10LEFT_CLICKI7Node_DDEEvP6VERTEXIT_E:
function _ZN11MAIN_WINDOW10LEFT_CLICKI7Node_DDEEvP6VERTEXIT_E called 0 returned 0% blocks executed 0%
    #####:  186:void MAIN_WINDOW::LEFT_CLICK(VERTEX<vertex_type>* TREE) noexcept {
    #####:  187:    VERTEX<vertex_type>* res = MAIN_WINDOW::Which_Vertex<vertex_type>(TREE);
    %%%%%:  187-block  0
call    0 never executed
    #####:  188:    if (res != nullptr) {
branch  0 never executed
branch  1 never executed
    #####:  189:        if (res->COLOR == Color::Blue) {
    %%%%%:  189-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  190:            res->COLOR = Color::Red;
    #####:  191:            res->real_vertex->param.COLOR = Color::Red;
    %%%%%:  191-block  0
        -:  192:        } else {
    #####:  193:            res->COLOR = Color::Blue;
    #####:  194:            res->real_vertex->param.COLOR = Color::Blue;
    %%%%%:  194-block  0
        -:  195:        }
        -:  196:    }
    #####:  197:}
------------------
        -:  198:
        -:  199:template<typename vertex_type>
       1*:  200:void MAIN_WINDOW::RIGHT_CLICK(VERTEX<vertex_type> *TREE) noexcept {
       1*:  201:    VERTEX<vertex_type>* res = Which_Vertex<vertex_type>(TREE);
       1*:  202:    if (res != nullptr) {
       1*:  203:        Info_Extra_Window e(res);
       1*:  204:        e.Process();
       1*:  205:    }
       1*:  206:}
------------------
_ZN11MAIN_WINDOW11RIGHT_CLICKI8Node_AVLEEvP6VERTEXIT_E:
function _ZN11MAIN_WINDOW11RIGHT_CLICKI8Node_AVLEEvP6VERTEXIT_E called 1 returned 100% blocks executed 100%
        1:  200:void MAIN_WINDOW::RIGHT_CLICK(VERTEX<vertex_type> *TREE) noexcept {
        1:  201:    VERTEX<vertex_type>* res = Which_Vertex<vertex_type>(TREE);
        1:  201-block  0
call    0 returned 1
        1:  202:    if (res != nullptr) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  203:        Info_Extra_Window e(res);
        1:  203-block  0
call    0 returned 1
        1:  204:        e.Process();
call    0 returned 1
        1:  205:    }
call    0 returned 1
        1:  206:}
------------------
_ZN11MAIN_WINDOW11RIGHT_CLICKI7Node_DDEEvP6VERTEXIT_E:
function _ZN11MAIN_WINDOW11RIGHT_CLICKI7Node_DDEEvP6VERTEXIT_E called 0 returned 0% blocks executed 0%
    #####:  200:void MAIN_WINDOW::RIGHT_CLICK(VERTEX<vertex_type> *TREE) noexcept {
    #####:  201:    VERTEX<vertex_type>* res = Which_Vertex<vertex_type>(TREE);
    %%%%%:  201-block  0
call    0 never executed
    #####:  202:    if (res != nullptr) {
branch  0 never executed
branch  1 never executed
    #####:  203:        Info_Extra_Window e(res);
    %%%%%:  203-block  0
call    0 never executed
    #####:  204:        e.Process();
call    0 never executed
    #####:  205:    }
call    0 never executed
    #####:  206:}
------------------
        -:  207:
