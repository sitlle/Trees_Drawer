        -:    0:Source:/home/yeawer/tree/AVL.h
        -:    0:Graph:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/Control.cpp.gcno
        -:    0:Data:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/Control.cpp.gcda
        -:    0:Runs:1
        -:    1:#include<bits/stdc++.h>
        -:    2:#include"Random.h"
        -:    3:#include"Node_AVL.h"
        -:    4:#pragma once
        -:    5:class AVL {
        -:    6:public:
        -:    7:    Node_AVL* root;
        -:    8:    AVL() {
        -:    9:        root = nullptr;
        -:   10:    }
        -:   11:
        -:   12:    ~AVL() {
        -:   13:        clear(root);
        -:   14:    }
        -:   15:
function _ZN3AVL5Add_XEi called 2 returned 100% blocks executed 100%
        2:   16:    void Add_X(int32_t counter) {
       62:   17:        for (int32_t i = 0; i < counter; ++i) {
        2:   17-block  0
       62:   17-block  1
branch  0 taken 60
branch  1 taken 2 (fallthrough)
       60:   18:            int64_t num = get_random() % 100;
       60:   18-block  0
call    0 returned 60
       60:   19:            Add(num);
call    0 returned 60
        -:   20:        }
        2:   21:    }
        -:   22:
function _ZN3AVL3AddEl called 60 returned 100% blocks executed 100%
       60:   23:    void Add(int64_t val) {
       60:   24:        if (root == nullptr) {
       60:   24-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 59
        1:   25:            root = new Node_AVL(val);
        1:   25-block  0
call    0 returned 1
call    1 returned 1
        1:   26:            return;
        -:   27:        }
       59:   28:        root = Global_Balanced(root, val);
       59:   28-block  0
call    0 returned 59
        -:   29:    }
        -:   30:
        -:   31:    bool Find(int32_t val) {
        -:   32:        return Find(root, val);
        -:   33:    }
        -:   34:
        -:   35:    void Print() {
        -:   36:        Print(root);
        -:   37:    }
        -:   38:
        -:   39:private:
        -:   40:    void clear(Node_AVL* vertex) {
        -:   41:        if (vertex == nullptr) {
        -:   42:            return;
        -:   43:        }
        -:   44:        clear(vertex->left);
        -:   45:        clear(vertex->right);
        -:   46:        delete[] vertex;
        -:   47:    }
        -:   48:
        -:   49:    void Print(Node_AVL* vertex) {
        -:   50:        if (vertex == nullptr) {
        -:   51:            return;
        -:   52:        }
        -:   53:        Print(vertex->left);
        -:   54:        std::cout << vertex->val << ' ';
        -:   55:        Print(vertex->right);
        -:   56:    }
        -:   57:
        -:   58:    bool Find(Node_AVL* vertex, int64_t val) {
        -:   59:        if (vertex == nullptr) {
        -:   60:            return false;
        -:   61:        }
        -:   62:        if (vertex->val == val) {
        -:   63:            return true;
        -:   64:        }
        -:   65:        if (val < vertex->val) {
        -:   66:            return Find(vertex->left, val);
        -:   67:        } else {
        -:   68:            return Find(vertex->right, val);
        -:   69:        }
        -:   70:    }
        -:   71:
function _ZN3AVL10get_heightEPK8Node_AVL called 2356 returned 100% blocks executed 100%
     2356:   72:    int32_t get_height(const Node_AVL* vertex) {
     2356:   73:        if (vertex == nullptr) {
     2356:   73-block  0
branch  0 taken 326 (fallthrough)
branch  1 taken 2030
      326:   74:            return 0;
      326:   74-block  0
        -:   75:        }
     2030:   76:        return vertex->height;
     2030:   76-block  0
        -:   77:    }
        -:   78:
function _ZN3AVL11get_balanceEPK8Node_AVL called 818 returned 100% blocks executed 83%
      818:   79:    int32_t get_balance(const Node_AVL* vertex) {
      818:   80:        if (vertex == nullptr) {
      818:   80-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 818
    #####:   81:            return 0;
    %%%%%:   81-block  0
        -:   82:        }
      818:   83:        return get_height(vertex->right) - get_height(vertex->left);
      818:   83-block  0
call    0 returned 818
call    1 returned 818
        -:   84:    }
        -:   85:
function _ZN3AVL6UpdateEP8Node_AVL called 360 returned 100% blocks executed 100%
      360:   86:    void Update(Node_AVL* vertex) {
      360:   87:        vertex->height = std::max(get_height(vertex->left),
call    0 returned 360
      360:   88:                                  get_height(vertex->right)) + 1;
      360:   88-block  0
call    0 returned 360
call    1 returned 360
      360:   89:        vertex->balance = get_balance(vertex);
call    0 returned 360
      360:   90:    }
        -:   91:
function _ZN3AVL8L_RotateEP8Node_AVL called 18 returned 100% blocks executed 100%
       18:   92:    Node_AVL* L_Rotate(Node_AVL* vertex) {
       18:   93:        Node_AVL* right_child = vertex->right;
       18:   94:        vertex->right = right_child->left;
       18:   95:        right_child->left = vertex;
       18:   96:        Update(vertex);
       18:   96-block  0
call    0 returned 18
       18:   97:        Update(right_child);
call    0 returned 18
       18:   98:        return right_child;
        -:   99:    }
        -:  100:
function _ZN3AVL8R_RotateEP8Node_AVL called 22 returned 100% blocks executed 100%
       22:  101:    Node_AVL* R_Rotate(Node_AVL* vertex) {
       22:  102:        Node_AVL* left_child = vertex->left;
       22:  103:        vertex->left = left_child->right;
       22:  104:        left_child->right = vertex;
       22:  105:        Update(vertex);
       22:  105-block  0
call    0 returned 22
       22:  106:        Update(left_child);
call    0 returned 22
       22:  107:        return left_child;
        -:  108:    }
        -:  109:
function _ZN3AVL14Local_BalancedEP8Node_AVL called 221 returned 100% blocks executed 100%
      221:  110:    Node_AVL* Local_Balanced(Node_AVL* vertex) {
      221:  111:        Update(vertex);
      221:  111-block  0
call    0 returned 221
      221:  112:        if (get_balance(vertex) == 2) {
call    0 returned 221
branch  1 taken 10 (fallthrough)
branch  2 taken 211
       10:  113:            if (get_balance(vertex->right) < 0) {
       10:  113-block  0
call    0 returned 10
branch  1 taken 6 (fallthrough)
branch  2 taken 4
        6:  114:                vertex->right = R_Rotate(vertex->right);
        6:  114-block  0
call    0 returned 6
        -:  115:            }
       10:  116:            return L_Rotate(vertex);
       10:  116-block  0
call    0 returned 10
        -:  117:        }
      211:  118:        if (get_balance(vertex) == -2) {
      211:  118-block  0
call    0 returned 211
branch  1 taken 16 (fallthrough)
branch  2 taken 195
       16:  119:            if (get_balance(vertex->left) > 0) {
       16:  119-block  0
call    0 returned 16
branch  1 taken 8 (fallthrough)
branch  2 taken 8
        8:  120:                vertex->left = L_Rotate(vertex->left);
        8:  120-block  0
call    0 returned 8
        -:  121:            }
       16:  122:            return R_Rotate(vertex);
       16:  122-block  0
call    0 returned 16
        -:  123:        }
      195:  124:        return vertex;
      195:  124-block  0
        -:  125:    }
        -:  126:
function _ZN3AVL15Global_BalancedEP8Node_AVLRl called 280 returned 100% blocks executed 100%
      280:  127:    Node_AVL* Global_Balanced(Node_AVL* vertex, int64_t& val) {
      280:  128:        if (val <= vertex->val) {
      280:  128-block  0
branch  0 taken 155 (fallthrough)
branch  1 taken 125
      155:  129:            if (vertex->left != nullptr) {
      155:  129-block  0
branch  0 taken 124 (fallthrough)
branch  1 taken 31
      124:  130:                vertex->left = Global_Balanced(vertex->left, val);
      124:  130-block  0
call    0 returned 124
        -:  131:            } else {
       31:  132:                auto new_node = new Node_AVL(val, 0);
       31:  132-block  0
call    0 returned 31
call    1 returned 31
       31:  133:                vertex->left = new_node;
       31:  134:                Update(vertex);
call    0 returned 31
       31:  135:                return vertex;
        -:  136:            }
        -:  137:        } else {
      125:  138:            if (vertex->right != nullptr) {
      125:  138-block  0
branch  0 taken 97 (fallthrough)
branch  1 taken 28
       97:  139:                vertex->right = Global_Balanced(vertex->right, val);
       97:  139-block  0
call    0 returned 97
        -:  140:            } else {
       28:  141:                auto new_node = new Node_AVL(val, 0);
       28:  141-block  0
call    0 returned 28
call    1 returned 28
       28:  142:                vertex->right = new_node;
       28:  143:                Update(vertex);
call    0 returned 28
       28:  144:                return vertex;
        -:  145:            }
        -:  146:        }
      221:  147:        return Local_Balanced(vertex);
      221:  147-block  0
call    0 returned 221
        -:  148:    }
        -:  149:};
