        -:    0:Source:/home/yeawer/tree/AVL.h
        -:    0:Graph:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/Control.cpp.gcno
        -:    0:Data:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/Control.cpp.gcda
        -:    0:Runs:1
        -:    1:#include<bits/stdc++.h>
        -:    2:#include"Random.h"
        -:    3:#include"Node_AVL.h"
        -:    4:#pragma once
        -:    5:class AVL {
        -:    6:public:
        -:    7:    Node_AVL* root;
        -:    8:    AVL() {
        -:    9:        root = nullptr;
        -:   10:    }
        -:   11:
        -:   12:    ~AVL() = default;
        -:   13:
        -:   14:    AVL(AVL const& other) {
        -:   15:        root = other.root;
        -:   16:    }
        -:   17:
function _ZN3AVL5Add_XEi called 1 returned 100% blocks executed 100%
        1:   18:    void Add_X(int32_t counter) {
       34:   19:        for (int32_t i = 0; i < counter; ++i) {
        1:   19-block  0
       34:   19-block  1
branch  0 taken 33
branch  1 taken 1 (fallthrough)
       33:   20:            int64_t num = get_random() % 100;
       33:   20-block  0
call    0 returned 33
       33:   21:            Add(num);
call    0 returned 33
        -:   22:        }
        1:   23:    }
        -:   24:
function _ZN3AVL3AddEl called 33 returned 100% blocks executed 89%
       33:   25:    void Add(int64_t val) {
       33:   26:        if (root == nullptr) {
       33:   26-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 32
        1:   27:            root = new Node_AVL(val);
        1:   27-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   27-block  1
call    4 never executed
        1:   28:            return;
        1:   28-block  0
        -:   29:        }
       32:   30:        root = Global_Balanced(root, val);
       32:   30-block  0
call    0 returned 32
        -:   31:    }
        -:   32:
        -:   33:    bool Find(int32_t val) {
        -:   34:        return Find(root, val);
        -:   35:    }
        -:   36:
        -:   37:    void Print() {
        -:   38:        Print(root);
        -:   39:    }
        -:   40:
        -:   41:private:
        -:   42:    void clear(Node_AVL* vertex) {
        -:   43:        if (vertex == nullptr) {
        -:   44:            return;
        -:   45:        }
        -:   46:        clear(vertex->left);
        -:   47:        clear(vertex->right);
        -:   48:        delete[] vertex;
        -:   49:    }
        -:   50:
        -:   51:    void Print(Node_AVL* vertex) {
        -:   52:        if (vertex == nullptr) {
        -:   53:            return;
        -:   54:        }
        -:   55:        Print(vertex->left);
        -:   56:        std::cout << vertex->val << ' ';
        -:   57:        Print(vertex->right);
        -:   58:    }
        -:   59:
        -:   60:    bool Find(Node_AVL* vertex, int64_t val) {
        -:   61:        if (vertex == nullptr) {
        -:   62:            return false;
        -:   63:        }
        -:   64:        if (vertex->val == val) {
        -:   65:            return true;
        -:   66:        }
        -:   67:        if (val < vertex->val) {
        -:   68:            return Find(vertex->left, val);
        -:   69:        } else {
        -:   70:            return Find(vertex->right, val);
        -:   71:        }
        -:   72:    }
        -:   73:
function _ZN3AVL10get_heightEPK8Node_AVL called 1116 returned 100% blocks executed 100%
     1116:   74:    int32_t get_height(const Node_AVL* vertex) {
     1116:   75:        if (vertex == nullptr) {
     1116:   75-block  0
branch  0 taken 166 (fallthrough)
branch  1 taken 950
      166:   76:            return 0;
      166:   76-block  0
        -:   77:        }
      950:   78:        return vertex->height;
      950:   78-block  0
        -:   79:    }
        -:   80:
function _ZN3AVL11get_balanceEPK8Node_AVL called 380 returned 100% blocks executed 83%
      380:   81:    int32_t get_balance(const Node_AVL* vertex) {
      380:   82:        if (vertex == nullptr) {
      380:   82-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 380
    #####:   83:            return 0;
    %%%%%:   83-block  0
        -:   84:        }
      380:   85:        return get_height(vertex->right) - get_height(vertex->left);
      380:   85-block  0
call    0 returned 380
call    1 returned 380
        -:   86:    }
        -:   87:
function _ZN3AVL6UpdateEP8Node_AVL called 178 returned 100% blocks executed 100%
      178:   88:    void Update(Node_AVL* vertex) {
      178:   89:        vertex->height = std::max(get_height(vertex->left),
call    0 returned 178
      178:   90:                                  get_height(vertex->right)) + 1;
      178:   90-block  0
call    0 returned 178
call    1 returned 178
      178:   91:        vertex->balance = get_balance(vertex);
call    0 returned 178
      178:   92:    }
        -:   93:
function _ZN3AVL8L_RotateEP8Node_AVL called 12 returned 100% blocks executed 100%
       12:   94:    Node_AVL* L_Rotate(Node_AVL* vertex) {
       12:   95:        Node_AVL* right_child = vertex->right;
       12:   96:        vertex->right = right_child->left;
       12:   97:        right_child->left = vertex;
       12:   98:        Update(vertex);
       12:   98-block  0
call    0 returned 12
       12:   99:        Update(right_child);
call    0 returned 12
       12:  100:        return right_child;
        -:  101:    }
        -:  102:
function _ZN3AVL8R_RotateEP8Node_AVL called 13 returned 100% blocks executed 100%
       13:  103:    Node_AVL* R_Rotate(Node_AVL* vertex) {
       13:  104:        Node_AVL* left_child = vertex->left;
       13:  105:        vertex->left = left_child->right;
       13:  106:        left_child->right = vertex;
       13:  107:        Update(vertex);
       13:  107-block  0
call    0 returned 13
       13:  108:        Update(left_child);
call    0 returned 13
       13:  109:        return left_child;
        -:  110:    }
        -:  111:
function _ZN3AVL14Local_BalancedEP8Node_AVL called 96 returned 100% blocks executed 100%
       96:  112:    Node_AVL* Local_Balanced(Node_AVL* vertex) {
       96:  113:        Update(vertex);
       96:  113-block  0
call    0 returned 96
       96:  114:        if (get_balance(vertex) == 2) {
call    0 returned 96
branch  1 taken 6 (fallthrough)
branch  2 taken 90
        6:  115:            if (get_balance(vertex->right) < 0) {
        6:  115-block  0
call    0 returned 6
branch  1 taken 3 (fallthrough)
branch  2 taken 3
        3:  116:                vertex->right = R_Rotate(vertex->right);
        3:  116-block  0
call    0 returned 3
        -:  117:            }
        6:  118:            return L_Rotate(vertex);
        6:  118-block  0
call    0 returned 6
        -:  119:        }
       90:  120:        if (get_balance(vertex) == -2) {
       90:  120-block  0
call    0 returned 90
branch  1 taken 10 (fallthrough)
branch  2 taken 80
       10:  121:            if (get_balance(vertex->left) > 0) {
       10:  121-block  0
call    0 returned 10
branch  1 taken 6 (fallthrough)
branch  2 taken 4
        6:  122:                vertex->left = L_Rotate(vertex->left);
        6:  122-block  0
call    0 returned 6
        -:  123:            }
       10:  124:            return R_Rotate(vertex);
       10:  124-block  0
call    0 returned 10
        -:  125:        }
       80:  126:        return vertex;
       80:  126-block  0
        -:  127:    }
        -:  128:
function _ZN3AVL15Global_BalancedEP8Node_AVLRl called 128 returned 100% blocks executed 86%
      128:  129:    Node_AVL* Global_Balanced(Node_AVL* vertex, int64_t& val) {
      128:  130:        if (val <= vertex->val) {
      128:  130-block  0
branch  0 taken 65 (fallthrough)
branch  1 taken 63
       65:  131:            if (vertex->left != nullptr) {
       65:  131-block  0
branch  0 taken 51 (fallthrough)
branch  1 taken 14
       51:  132:                vertex->left = Global_Balanced(vertex->left, val);
       51:  132-block  0
call    0 returned 51
        -:  133:            } else {
       14:  134:                auto new_node = new Node_AVL(val, 0);
       14:  134-block  0
call    0 returned 14
call    1 returned 14
branch  2 taken 14 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  134-block  1
call    4 never executed
       14:  135:                vertex->left = new_node;
       14:  136:                Update(vertex);
       14:  136-block  0
call    0 returned 14
       14:  137:                return vertex;
        -:  138:            }
        -:  139:        } else {
       63:  140:            if (vertex->right != nullptr) {
       63:  140-block  0
branch  0 taken 45 (fallthrough)
branch  1 taken 18
       45:  141:                vertex->right = Global_Balanced(vertex->right, val);
       45:  141-block  0
call    0 returned 45
        -:  142:            } else {
       18:  143:                auto new_node = new Node_AVL(val, 0);
       18:  143-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  143-block  1
call    4 never executed
       18:  144:                vertex->right = new_node;
       18:  145:                Update(vertex);
       18:  145-block  0
call    0 returned 18
       18:  146:                return vertex;
        -:  147:            }
        -:  148:        }
       96:  149:        return Local_Balanced(vertex);
       96:  149-block  0
call    0 returned 96
        -:  150:    }
        -:  151:};
