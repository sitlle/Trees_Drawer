        -:    0:Source:/home/yeawer/tree/Trees_Building.h
        -:    0:Graph:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/Control.cpp.gcno
        -:    0:Data:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/Control.cpp.gcda
        -:    0:Runs:1
        -:    1:#include"DD.h"
        -:    2:#include"Node_DD.h"
        -:    3:#include"VERTEX.h"
        -:    4:#include"TREE_OPTIONS.h"
        -:    5:#include"BigInteger.h"
        -:    6:#pragma once
        -:    7:
        -:    8:class Trees_Building {
        -:    9:public:
        -:   10:    Trees_Building() = default;
        -:   11:    ~Trees_Building() = default;
        -:   12:
        -:   13:    template<typename vertex_type, typename tree_type>
        -:   14:    static VERTEX<vertex_type>* Build_Tree(tree_type& TREE, TREE_OPTIONS& TREE_OPT) noexcept;
        -:   15:private:
        -:   16:    template<typename vertex_type>
        -:   17:    static int32_t ReCalcHeight(vertex_type* vertex) noexcept;
        -:   18:
        -:   19:    template<typename vertex_type>
        -:   20:    static int32_t ReCalcSize(vertex_type* vertex) noexcept;
        -:   21:
        -:   22:    template<typename vertex_type>
        -:   23:    static void ReCalcPosX(vertex_type* vertex, int64_t x) noexcept;
        -:   24:
        -:   25:    template<typename vertex_type>
        -:   26:    static void ReBuildTree(vertex_type* vertex) noexcept;
        -:   27:
        -:   28:    template<typename vertex_type>
        -:   29:    static void ReCalcRadius(VERTEX<vertex_type>* node, float& RAD) noexcept;
        -:   30:
        -:   31:    template<typename vertex_type>
        -:   32:    static VERTEX<vertex_type>* Tree_Building_InOrder(vertex_type *vertex, VERTEX<vertex_type> *node,
        -:   33:                                               std::pair<float, float> last_coords,
        -:   34:                                               TREE_OPTIONS& TREE_OPT) noexcept;
        -:   35:
        -:   36:    template<typename vertex_type>
        -:   37:    static void Update_LR(vertex_type* vertex, bigint SDV = to_bigint("0")) noexcept;
        -:   38:
        -:   39:    template<typename vertex_type>
        -:   40:    static void Compression(vertex_type* vertex, int64_t H,
        -:   41:                     bigint path_sum = to_bigint("0"), int LorR = -1) noexcept;
        -:   42:
        -:   43:    template<typename vertex_type>
        -:   44:    static void LazyUpdates(vertex_type* vertex, bigint push) noexcept;
        -:   45:};
        -:   46:
        -:   47:template<typename vertex_type>
     5579:   48:int32_t Trees_Building::ReCalcHeight(vertex_type* vertex) noexcept {
     5579:   49:    if (vertex == nullptr) {
     2842:   50:        return 0;
        -:   51:    }
     2737:   52:    return (vertex->param.height = std::max(ReCalcHeight<vertex_type>(vertex->left),
     5474:   53:                                            ReCalcHeight<vertex_type>(vertex->right)) + 1);
        -:   54:}
------------------
_ZN14Trees_Building12ReCalcHeightI8Node_AVLEEiPT_:
function _ZN14Trees_Building12ReCalcHeightI8Node_AVLEEiPT_ called 67 returned 100% blocks executed 100%
       67:   48:int32_t Trees_Building::ReCalcHeight(vertex_type* vertex) noexcept {
       67:   49:    if (vertex == nullptr) {
       67:   49-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 33
       34:   50:        return 0;
       34:   50-block  0
        -:   51:    }
       33:   52:    return (vertex->param.height = std::max(ReCalcHeight<vertex_type>(vertex->left),
call    0 returned 33
       66:   53:                                            ReCalcHeight<vertex_type>(vertex->right)) + 1);
       33:   53-block  0
call    0 returned 33
call    1 returned 33
        -:   54:}
------------------
_ZN14Trees_Building12ReCalcHeightI7Node_DDEEiPT_:
function _ZN14Trees_Building12ReCalcHeightI7Node_DDEEiPT_ called 5512 returned 100% blocks executed 100%
     5512:   48:int32_t Trees_Building::ReCalcHeight(vertex_type* vertex) noexcept {
     5512:   49:    if (vertex == nullptr) {
     5512:   49-block  0
branch  0 taken 2808 (fallthrough)
branch  1 taken 2704
     2808:   50:        return 0;
     2808:   50-block  0
        -:   51:    }
     2704:   52:    return (vertex->param.height = std::max(ReCalcHeight<vertex_type>(vertex->left),
call    0 returned 2704
     5408:   53:                                            ReCalcHeight<vertex_type>(vertex->right)) + 1);
     2704:   53-block  0
call    0 returned 2704
call    1 returned 2704
        -:   54:}
------------------
        -:   55:
        -:   56:template<typename vertex_type>
     5579:   57:int32_t Trees_Building::ReCalcSize(vertex_type* vertex) noexcept {
     5579:   58:    if (vertex == nullptr) {
     2842:   59:        return 0;
        -:   60:    }
     2737:   61:    return (vertex->param.size = ReCalcSize(vertex->left) + ReCalcSize(vertex->right) + 1);
        -:   62:}
------------------
_ZN14Trees_Building10ReCalcSizeI8Node_AVLEEiPT_:
function _ZN14Trees_Building10ReCalcSizeI8Node_AVLEEiPT_ called 67 returned 100% blocks executed 100%
       67:   57:int32_t Trees_Building::ReCalcSize(vertex_type* vertex) noexcept {
       67:   58:    if (vertex == nullptr) {
       67:   58-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 33
       34:   59:        return 0;
       34:   59-block  0
        -:   60:    }
       33:   61:    return (vertex->param.size = ReCalcSize(vertex->left) + ReCalcSize(vertex->right) + 1);
       33:   61-block  0
call    0 returned 33
call    1 returned 33
        -:   62:}
------------------
_ZN14Trees_Building10ReCalcSizeI7Node_DDEEiPT_:
function _ZN14Trees_Building10ReCalcSizeI7Node_DDEEiPT_ called 5512 returned 100% blocks executed 100%
     5512:   57:int32_t Trees_Building::ReCalcSize(vertex_type* vertex) noexcept {
     5512:   58:    if (vertex == nullptr) {
     5512:   58-block  0
branch  0 taken 2808 (fallthrough)
branch  1 taken 2704
     2808:   59:        return 0;
     2808:   59-block  0
        -:   60:    }
     2704:   61:    return (vertex->param.size = ReCalcSize(vertex->left) + ReCalcSize(vertex->right) + 1);
     2704:   61-block  0
call    0 returned 2704
call    1 returned 2704
        -:   62:}
------------------
        -:   63:
        -:   64:template<typename vertex_type>
     2737:   65:void Trees_Building::ReCalcPosX(vertex_type* vertex, int64_t x) noexcept {
     2737:   66:    if (vertex == nullptr) {
    #####:   67:        return;
        -:   68:    }
     2737:   69:    if (vertex->left != nullptr) {
     2318:   70:        bigint two = bigint("2");
     1159:   71:        bigint X = bigint(std::to_string(std::max(static_cast<int64_t>(0), x - 1)));
     1159:   72:        vertex->left->param.posX = vertex->param.posX - big_pow(two, X);
     1159:   73:        ReCalcPosX<vertex_type>(vertex->left, x - 1);
     1159:   74:    }
     2737:   75:    if (vertex->right != nullptr) {
     2946:   76:        bigint two = bigint("2");
     1473:   77:        bigint X = bigint(std::to_string(std::max(static_cast<int64_t>(0), x - 1)));
     1473:   78:        vertex->right->param.posX = vertex->param.posX + big_pow(two, X);
     1473:   79:        ReCalcPosX<vertex_type>(vertex->right, x - 1);
     1473:   80:    }
        -:   81:}
------------------
_ZN14Trees_Building10ReCalcPosXI8Node_AVLEEvPT_l:
function _ZN14Trees_Building10ReCalcPosXI8Node_AVLEEvPT_l called 33 returned 100% blocks executed 98%
       33:   65:void Trees_Building::ReCalcPosX(vertex_type* vertex, int64_t x) noexcept {
       33:   66:    if (vertex == nullptr) {
       33:   66-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 33
    #####:   67:        return;
    %%%%%:   67-block  0
        -:   68:    }
       33:   69:    if (vertex->left != nullptr) {
       33:   69-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 18
       30:   70:        bigint two = bigint("2");
       15:   70-block  0
call    0 returned 15
call    1 returned 15
call    2 returned 15
call    3 returned 15
       15:   71:        bigint X = bigint(std::to_string(std::max(static_cast<int64_t>(0), x - 1)));
call    0 returned 15
call    1 returned 15
call    2 returned 15
       15:   72:        vertex->left->param.posX = vertex->param.posX - big_pow(two, X);
call    0 returned 15
call    1 returned 15
call    2 returned 15
call    3 returned 15
call    4 returned 15
       15:   73:        ReCalcPosX<vertex_type>(vertex->left, x - 1);
call    0 returned 15
       15:   74:    }
call    0 returned 15
call    1 returned 15
       33:   75:    if (vertex->right != nullptr) {
       33:   75-block  0
branch  0 taken 17 (fallthrough)
branch  1 taken 16
       34:   76:        bigint two = bigint("2");
       17:   76-block  0
call    0 returned 17
call    1 returned 17
call    2 returned 17
call    3 returned 17
       17:   77:        bigint X = bigint(std::to_string(std::max(static_cast<int64_t>(0), x - 1)));
call    0 returned 17
call    1 returned 17
call    2 returned 17
       17:   78:        vertex->right->param.posX = vertex->param.posX + big_pow(two, X);
call    0 returned 17
call    1 returned 17
call    2 returned 17
call    3 returned 17
call    4 returned 17
       17:   79:        ReCalcPosX<vertex_type>(vertex->right, x - 1);
call    0 returned 17
       17:   80:    }
call    0 returned 17
call    1 returned 17
        -:   81:}
------------------
_ZN14Trees_Building10ReCalcPosXI7Node_DDEEvPT_l:
function _ZN14Trees_Building10ReCalcPosXI7Node_DDEEvPT_l called 2704 returned 100% blocks executed 98%
     2704:   65:void Trees_Building::ReCalcPosX(vertex_type* vertex, int64_t x) noexcept {
     2704:   66:    if (vertex == nullptr) {
     2704:   66-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2704
    #####:   67:        return;
    %%%%%:   67-block  0
        -:   68:    }
     2704:   69:    if (vertex->left != nullptr) {
     2704:   69-block  0
branch  0 taken 1144 (fallthrough)
branch  1 taken 1560
     2288:   70:        bigint two = bigint("2");
     1144:   70-block  0
call    0 returned 1144
call    1 returned 1144
call    2 returned 1144
call    3 returned 1144
     1144:   71:        bigint X = bigint(std::to_string(std::max(static_cast<int64_t>(0), x - 1)));
call    0 returned 1144
call    1 returned 1144
call    2 returned 1144
     1144:   72:        vertex->left->param.posX = vertex->param.posX - big_pow(two, X);
call    0 returned 1144
call    1 returned 1144
call    2 returned 1144
call    3 returned 1144
call    4 returned 1144
     1144:   73:        ReCalcPosX<vertex_type>(vertex->left, x - 1);
call    0 returned 1144
     1144:   74:    }
call    0 returned 1144
call    1 returned 1144
     2704:   75:    if (vertex->right != nullptr) {
     2704:   75-block  0
branch  0 taken 1456 (fallthrough)
branch  1 taken 1248
     2912:   76:        bigint two = bigint("2");
     1456:   76-block  0
call    0 returned 1456
call    1 returned 1456
call    2 returned 1456
call    3 returned 1456
     1456:   77:        bigint X = bigint(std::to_string(std::max(static_cast<int64_t>(0), x - 1)));
call    0 returned 1456
call    1 returned 1456
call    2 returned 1456
     1456:   78:        vertex->right->param.posX = vertex->param.posX + big_pow(two, X);
call    0 returned 1456
call    1 returned 1456
call    2 returned 1456
call    3 returned 1456
call    4 returned 1456
     1456:   79:        ReCalcPosX<vertex_type>(vertex->right, x - 1);
call    0 returned 1456
     1456:   80:    }
call    0 returned 1456
call    1 returned 1456
        -:   81:}
------------------
        -:   82:
        -:   83:template<typename vertex_type>
     5579:   84:void Trees_Building::ReBuildTree(vertex_type* vertex) noexcept {
     5579:   85:    if (vertex == nullptr) {
     2842:   86:        return;
        -:   87:    }
     2737:   88:    ReBuildTree<vertex_type>(vertex->left);
     2737:   89:    ReBuildTree<vertex_type>(vertex->right);
     2737:   90:    bigint left = ((vertex->left == nullptr) ? vertex->param.posX : vertex->left->param.L);
     2737:   91:    bigint right = ((vertex->right == nullptr) ? vertex->param.posX : vertex->right->param.R);
     2737:   92:    vertex->param.L = left;
     2737:   93:    vertex->param.R = right;
     2737:   94:}
------------------
_ZN14Trees_Building11ReBuildTreeI8Node_AVLEEvPT_:
function _ZN14Trees_Building11ReBuildTreeI8Node_AVLEEvPT_ called 67 returned 100% blocks executed 100%
       67:   84:void Trees_Building::ReBuildTree(vertex_type* vertex) noexcept {
       67:   85:    if (vertex == nullptr) {
       67:   85-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 33
       34:   86:        return;
       34:   86-block  0
        -:   87:    }
       33:   88:    ReBuildTree<vertex_type>(vertex->left);
       33:   88-block  0
call    0 returned 33
       33:   89:    ReBuildTree<vertex_type>(vertex->right);
call    0 returned 33
       33:   90:    bigint left = ((vertex->left == nullptr) ? vertex->param.posX : vertex->left->param.L);
branch  0 taken 18 (fallthrough)
branch  1 taken 15
       18:   90-block  0
       15:   90-block  1
       33:   90-block  2
call    2 returned 33
       33:   91:    bigint right = ((vertex->right == nullptr) ? vertex->param.posX : vertex->right->param.R);
branch  0 taken 16 (fallthrough)
branch  1 taken 17
       16:   91-block  0
       17:   91-block  1
       33:   91-block  2
call    2 returned 33
       33:   92:    vertex->param.L = left;
call    0 returned 33
       33:   93:    vertex->param.R = right;
call    0 returned 33
       33:   94:}
call    0 returned 33
call    1 returned 33
------------------
_ZN14Trees_Building11ReBuildTreeI7Node_DDEEvPT_:
function _ZN14Trees_Building11ReBuildTreeI7Node_DDEEvPT_ called 5512 returned 100% blocks executed 100%
     5512:   84:void Trees_Building::ReBuildTree(vertex_type* vertex) noexcept {
     5512:   85:    if (vertex == nullptr) {
     5512:   85-block  0
branch  0 taken 2808 (fallthrough)
branch  1 taken 2704
     2808:   86:        return;
     2808:   86-block  0
        -:   87:    }
     2704:   88:    ReBuildTree<vertex_type>(vertex->left);
     2704:   88-block  0
call    0 returned 2704
     2704:   89:    ReBuildTree<vertex_type>(vertex->right);
call    0 returned 2704
     2704:   90:    bigint left = ((vertex->left == nullptr) ? vertex->param.posX : vertex->left->param.L);
branch  0 taken 1560 (fallthrough)
branch  1 taken 1144
     1560:   90-block  0
     1144:   90-block  1
     2704:   90-block  2
call    2 returned 2704
     2704:   91:    bigint right = ((vertex->right == nullptr) ? vertex->param.posX : vertex->right->param.R);
branch  0 taken 1248 (fallthrough)
branch  1 taken 1456
     1248:   91-block  0
     1456:   91-block  1
     2704:   91-block  2
call    2 returned 2704
     2704:   92:    vertex->param.L = left;
call    0 returned 2704
     2704:   93:    vertex->param.R = right;
call    0 returned 2704
     2704:   94:}
call    0 returned 2704
call    1 returned 2704
------------------
        -:   95:
        -:   96:template<typename vertex_type>
        -:   97:void Trees_Building::ReCalcRadius(VERTEX<vertex_type>* node, float& RAD) noexcept {
        -:   98:    if (node == nullptr) {
        -:   99:        return;
        -:  100:    }
        -:  101:    ReCalcRadius<vertex_type>(node->left, RAD);
        -:  102:    node->radius = RAD;
        -:  103:    ReCalcRadius<vertex_type>(node->right, RAD);
        -:  104:}
        -:  105:
        -:  106:template<typename vertex_type>
     5579:  107:VERTEX<vertex_type>* Trees_Building::Tree_Building_InOrder(vertex_type *vertex, VERTEX<vertex_type> *node,
        -:  108:                                           std::pair<float, float> last_coords,
        -:  109:                                           TREE_OPTIONS& TREE_OPT) noexcept {
     5579:  110:    if (vertex == nullptr) {
     2842:  111:        return nullptr;
        -:  112:    }
        -:  113:    // node copy
     2737:  114:    node = new VERTEX<vertex_type>;
     2737:  115:    node->real_vertex = vertex;
     2737:  116:    node->coords = {0, 0};
     2737:  117:    node->val = vertex->val;
     2737:  118:    node->radius = 30;
     2737:  119:    node->COLOR = vertex->param.COLOR;
     2737:  120:    if (last_coords.first == 1250 && last_coords.second == 0) { // root
      105:  121:        node->coords = {1250 + TREE_OPT.TREE_W *
      210:  122:                               bigint::to_int(vertex->param.posX + vertex->param.sdv) * 30,
      210:  123:                        last_coords.second + 30};
        -:  124:    } else {
     2632:  125:        node->coords = {1250 + TREE_OPT.TREE_W *
     5264:  126:                               bigint::to_int(vertex->param.posX + vertex->param.sdv) * 30,
     7896:  127:                        last_coords.second + 2 * (std::max(TREE_OPT.TREE_H,
     5264:  128:                                                           float(vertex->param.size) / 20.f)) * 30};
        -:  129:    }
        -:  130:    // node copy
     2737:  131:    node->left = Tree_Building_InOrder<vertex_type>(vertex->left, node->left,
        -:  132:                                                    node->coords, TREE_OPT);
     2737:  133:    node->right = Tree_Building_InOrder<vertex_type>(vertex->right, node->right,
        -:  134:                                                     node->coords, TREE_OPT);
     2737:  135:    return node;
        -:  136:}
------------------
_ZN14Trees_Building21Tree_Building_InOrderI8Node_AVLEEP6VERTEXIT_EPS3_S5_St4pairIffER12TREE_OPTIONS:
function _ZN14Trees_Building21Tree_Building_InOrderI8Node_AVLEEP6VERTEXIT_EPS3_S5_St4pairIffER12TREE_OPTIONS called 67 returned 100% blocks executed 100%
       67:  107:VERTEX<vertex_type>* Trees_Building::Tree_Building_InOrder(vertex_type *vertex, VERTEX<vertex_type> *node,
        -:  108:                                           std::pair<float, float> last_coords,
        -:  109:                                           TREE_OPTIONS& TREE_OPT) noexcept {
       67:  110:    if (vertex == nullptr) {
       67:  110-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 33
       34:  111:        return nullptr;
       34:  111-block  0
        -:  112:    }
        -:  113:    // node copy
       33:  114:    node = new VERTEX<vertex_type>;
       33:  114-block  0
call    0 returned 33
call    1 returned 33
       33:  115:    node->real_vertex = vertex;
       33:  116:    node->coords = {0, 0};
call    0 returned 33
call    1 returned 33
       33:  117:    node->val = vertex->val;
       33:  118:    node->radius = 30;
       33:  119:    node->COLOR = vertex->param.COLOR;
       33:  120:    if (last_coords.first == 1250 && last_coords.second == 0) { // root
branch  0 taken 3 (fallthrough)
branch  1 taken 30
        3:  120-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        1:  121:        node->coords = {1250 + TREE_OPT.TREE_W *
call    0 returned 1
        2:  122:                               bigint::to_int(vertex->param.posX + vertex->param.sdv) * 30,
        1:  122-block  0
call    0 returned 1
call    1 returned 1
        2:  123:                        last_coords.second + 30};
call    0 returned 1
call    1 returned 1
        -:  124:    } else {
       32:  125:        node->coords = {1250 + TREE_OPT.TREE_W *
call    0 returned 32
       64:  126:                               bigint::to_int(vertex->param.posX + vertex->param.sdv) * 30,
       32:  126-block  0
call    0 returned 32
call    1 returned 32
       96:  127:                        last_coords.second + 2 * (std::max(TREE_OPT.TREE_H,
       64:  128:                                                           float(vertex->param.size) / 20.f)) * 30};
call    0 returned 32
call    1 returned 32
call    2 returned 32
        -:  129:    }
        -:  130:    // node copy
       33:  131:    node->left = Tree_Building_InOrder<vertex_type>(vertex->left, node->left,
       33:  131-block  0
call    0 returned 33
        -:  132:                                                    node->coords, TREE_OPT);
       33:  133:    node->right = Tree_Building_InOrder<vertex_type>(vertex->right, node->right,
call    0 returned 33
        -:  134:                                                     node->coords, TREE_OPT);
       33:  135:    return node;
        -:  136:}
------------------
_ZN14Trees_Building21Tree_Building_InOrderI7Node_DDEEP6VERTEXIT_EPS3_S5_St4pairIffER12TREE_OPTIONS:
function _ZN14Trees_Building21Tree_Building_InOrderI7Node_DDEEP6VERTEXIT_EPS3_S5_St4pairIffER12TREE_OPTIONS called 5512 returned 100% blocks executed 100%
     5512:  107:VERTEX<vertex_type>* Trees_Building::Tree_Building_InOrder(vertex_type *vertex, VERTEX<vertex_type> *node,
        -:  108:                                           std::pair<float, float> last_coords,
        -:  109:                                           TREE_OPTIONS& TREE_OPT) noexcept {
     5512:  110:    if (vertex == nullptr) {
     5512:  110-block  0
branch  0 taken 2808 (fallthrough)
branch  1 taken 2704
     2808:  111:        return nullptr;
     2808:  111-block  0
        -:  112:    }
        -:  113:    // node copy
     2704:  114:    node = new VERTEX<vertex_type>;
     2704:  114-block  0
call    0 returned 2704
call    1 returned 2704
     2704:  115:    node->real_vertex = vertex;
     2704:  116:    node->coords = {0, 0};
call    0 returned 2704
call    1 returned 2704
     2704:  117:    node->val = vertex->val;
     2704:  118:    node->radius = 30;
     2704:  119:    node->COLOR = vertex->param.COLOR;
     2704:  120:    if (last_coords.first == 1250 && last_coords.second == 0) { // root
branch  0 taken 312 (fallthrough)
branch  1 taken 2392
      312:  120-block  0
branch  2 taken 104 (fallthrough)
branch  3 taken 208
      104:  121:        node->coords = {1250 + TREE_OPT.TREE_W *
call    0 returned 104
      208:  122:                               bigint::to_int(vertex->param.posX + vertex->param.sdv) * 30,
      104:  122-block  0
call    0 returned 104
call    1 returned 104
      208:  123:                        last_coords.second + 30};
call    0 returned 104
call    1 returned 104
        -:  124:    } else {
     2600:  125:        node->coords = {1250 + TREE_OPT.TREE_W *
call    0 returned 2600
     5200:  126:                               bigint::to_int(vertex->param.posX + vertex->param.sdv) * 30,
     2600:  126-block  0
call    0 returned 2600
call    1 returned 2600
     7800:  127:                        last_coords.second + 2 * (std::max(TREE_OPT.TREE_H,
     5200:  128:                                                           float(vertex->param.size) / 20.f)) * 30};
call    0 returned 2600
call    1 returned 2600
call    2 returned 2600
        -:  129:    }
        -:  130:    // node copy
     2704:  131:    node->left = Tree_Building_InOrder<vertex_type>(vertex->left, node->left,
     2704:  131-block  0
call    0 returned 2704
        -:  132:                                                    node->coords, TREE_OPT);
     2704:  133:    node->right = Tree_Building_InOrder<vertex_type>(vertex->right, node->right,
call    0 returned 2704
        -:  134:                                                     node->coords, TREE_OPT);
     2704:  135:    return node;
        -:  136:}
------------------
        -:  137:
     5474:  138:template<typename vertex_type> void Trees_Building::Update_LR
        -:  139:(vertex_type* vertex, bigint SDV) noexcept {
     5474:  140:    if (vertex == nullptr) {
    #####:  141:        return;
        -:  142:    }
     5474:  143:    if (vertex->left != nullptr) {
     2318:  144:        vertex->param.L = vertex->left->param.L + SDV;
        -:  145:    } else {
     3156:  146:        vertex->param.L = vertex->param.posX + vertex->param.sdv;
        -:  147:    }
     5474:  148:    if (vertex->right != nullptr) {
     2946:  149:        vertex->param.R = vertex->right->param.R + SDV;
        -:  150:    } else {
     2528:  151:        vertex->param.R = vertex->param.posX + vertex->param.sdv;
        -:  152:    }
        -:  153:}
------------------
_ZN14Trees_Building9Update_LRI8Node_AVLEEvPT_6bigint:
function _ZN14Trees_Building9Update_LRI8Node_AVLEEvPT_6bigint called 66 returned 100% blocks executed 95%
       66:  138:template<typename vertex_type> void Trees_Building::Update_LR
        -:  139:(vertex_type* vertex, bigint SDV) noexcept {
       66:  140:    if (vertex == nullptr) {
       66:  140-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 66
    #####:  141:        return;
    %%%%%:  141-block  0
        -:  142:    }
       66:  143:    if (vertex->left != nullptr) {
       66:  143-block  0
branch  0 taken 30 (fallthrough)
branch  1 taken 36
       30:  144:        vertex->param.L = vertex->left->param.L + SDV;
       30:  144-block  0
call    0 returned 30
call    1 returned 30
call    2 returned 30
        -:  145:    } else {
       36:  146:        vertex->param.L = vertex->param.posX + vertex->param.sdv;
       36:  146-block  0
call    0 returned 36
call    1 returned 36
call    2 returned 36
        -:  147:    }
       66:  148:    if (vertex->right != nullptr) {
       66:  148-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 32
       34:  149:        vertex->param.R = vertex->right->param.R + SDV;
       34:  149-block  0
call    0 returned 34
call    1 returned 34
call    2 returned 34
        -:  150:    } else {
       32:  151:        vertex->param.R = vertex->param.posX + vertex->param.sdv;
       32:  151-block  0
call    0 returned 32
call    1 returned 32
call    2 returned 32
        -:  152:    }
        -:  153:}
------------------
_ZN14Trees_Building9Update_LRI7Node_DDEEvPT_6bigint:
function _ZN14Trees_Building9Update_LRI7Node_DDEEvPT_6bigint called 5408 returned 100% blocks executed 95%
     5408:  138:template<typename vertex_type> void Trees_Building::Update_LR
        -:  139:(vertex_type* vertex, bigint SDV) noexcept {
     5408:  140:    if (vertex == nullptr) {
     5408:  140-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5408
    #####:  141:        return;
    %%%%%:  141-block  0
        -:  142:    }
     5408:  143:    if (vertex->left != nullptr) {
     5408:  143-block  0
branch  0 taken 2288 (fallthrough)
branch  1 taken 3120
     2288:  144:        vertex->param.L = vertex->left->param.L + SDV;
     2288:  144-block  0
call    0 returned 2288
call    1 returned 2288
call    2 returned 2288
        -:  145:    } else {
     3120:  146:        vertex->param.L = vertex->param.posX + vertex->param.sdv;
     3120:  146-block  0
call    0 returned 3120
call    1 returned 3120
call    2 returned 3120
        -:  147:    }
     5408:  148:    if (vertex->right != nullptr) {
     5408:  148-block  0
branch  0 taken 2912 (fallthrough)
branch  1 taken 2496
     2912:  149:        vertex->param.R = vertex->right->param.R + SDV;
     2912:  149-block  0
call    0 returned 2912
call    1 returned 2912
call    2 returned 2912
        -:  150:    } else {
     2496:  151:        vertex->param.R = vertex->param.posX + vertex->param.sdv;
     2496:  151-block  0
call    0 returned 2496
call    1 returned 2496
call    2 returned 2496
        -:  152:    }
        -:  153:}
------------------
        -:  154:
        -:  155:template<typename vertex_type>
     5579:  156:void Trees_Building::Compression(vertex_type* vertex, int64_t H,
        -:  157:                 bigint path_sum, int LorR) noexcept {
     5579:  158:    if (vertex == nullptr) {
     2842:  159:        return;
        -:  160:    }
     5474:  161:    bigint two = bigint("2");
     2737:  162:    bigint first = bigint(std::to_string(std::max(static_cast<int64_t>(0), H - 1)));
     2737:  163:    bigint second = bigint(std::to_string(std::max(static_cast<int64_t>(0), H - 1)));
     2737:  164:    Compression<vertex_type>(vertex->left, H - 1, path_sum - big_pow(two, first), 0);
     2737:  165:    Compression<vertex_type>(vertex->right, H - 1,path_sum + big_pow(two, second), 1);
     2737:  166:    vertex->param.sdv = to_bigint("0");
        -:  167:    // update X
     2737:  168:    Update_LR<vertex_type>(vertex);
     2737:  169:    bigint BIG_H = bigint(std::to_string(H));
     5474:  170:    bigint Max = big_pow(two, BIG_H) - bigint("1") + path_sum;
     5474:  171:    bigint Min = (big_pow(two, BIG_H) - bigint("1")) * bigint("-1") + path_sum;
     2737:  172:    if (LorR == 0) {
     1159:  173:        bigint vertex_r = vertex->param.R;
     1159:  174:        bigint rz = Max - vertex_r;
     1159:  175:        vertex->param.sdv += rz;
     2737:  176:    } else if (LorR == 1) {
     1473:  177:        bigint vertex_l = vertex->param.L;
     1473:  178:        bigint rz = vertex_l - Min;
     1473:  179:        vertex->param.sdv -= rz;
     1473:  180:    }
     2737:  181:    Update_LR<vertex_type>(vertex, vertex->param.sdv);
     2737:  182:}
------------------
_ZN14Trees_Building11CompressionI8Node_AVLEEvPT_l6biginti:
function _ZN14Trees_Building11CompressionI8Node_AVLEEvPT_l6biginti called 67 returned 100% blocks executed 100%
       67:  156:void Trees_Building::Compression(vertex_type* vertex, int64_t H,
        -:  157:                 bigint path_sum, int LorR) noexcept {
       67:  158:    if (vertex == nullptr) {
       67:  158-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 33
       34:  159:        return;
       34:  159-block  0
        -:  160:    }
       66:  161:    bigint two = bigint("2");
       33:  161-block  0
call    0 returned 33
call    1 returned 33
call    2 returned 33
call    3 returned 33
       33:  162:    bigint first = bigint(std::to_string(std::max(static_cast<int64_t>(0), H - 1)));
call    0 returned 33
call    1 returned 33
call    2 returned 33
       33:  163:    bigint second = bigint(std::to_string(std::max(static_cast<int64_t>(0), H - 1)));
call    0 returned 33
call    1 returned 33
call    2 returned 33
       33:  164:    Compression<vertex_type>(vertex->left, H - 1, path_sum - big_pow(two, first), 0);
call    0 returned 33
call    1 returned 33
call    2 returned 33
call    3 returned 33
call    4 returned 33
       33:  165:    Compression<vertex_type>(vertex->right, H - 1,path_sum + big_pow(two, second), 1);
call    0 returned 33
call    1 returned 33
call    2 returned 33
call    3 returned 33
call    4 returned 33
       33:  166:    vertex->param.sdv = to_bigint("0");
call    0 returned 33
call    1 returned 33
call    2 returned 33
call    3 returned 33
call    4 returned 33
call    5 returned 33
call    6 returned 33
        -:  167:    // update X
       33:  168:    Update_LR<vertex_type>(vertex);
call    0 returned 33
call    1 returned 33
call    2 returned 33
call    3 returned 33
call    4 returned 33
call    5 returned 33
call    6 returned 33
       33:  169:    bigint BIG_H = bigint(std::to_string(H));
call    0 returned 33
call    1 returned 33
       66:  170:    bigint Max = big_pow(two, BIG_H) - bigint("1") + path_sum;
call    0 returned 33
call    1 returned 33
call    2 returned 33
call    3 returned 33
call    4 returned 33
call    5 returned 33
call    6 returned 33
call    7 returned 33
call    8 returned 33
call    9 returned 33
       66:  171:    bigint Min = (big_pow(two, BIG_H) - bigint("1")) * bigint("-1") + path_sum;
call    0 returned 33
call    1 returned 33
call    2 returned 33
call    3 returned 33
call    4 returned 33
call    5 returned 33
call    6 returned 33
call    7 returned 33
call    8 returned 33
call    9 returned 33
call   10 returned 33
call   11 returned 33
call   12 returned 33
call   13 returned 33
call   14 returned 33
call   15 returned 33
call   16 returned 33
call   17 returned 33
       33:  172:    if (LorR == 0) {
branch  0 taken 15 (fallthrough)
branch  1 taken 18
       15:  173:        bigint vertex_r = vertex->param.R;
       15:  173-block  0
call    0 returned 15
       15:  174:        bigint rz = Max - vertex_r;
call    0 returned 15
       15:  175:        vertex->param.sdv += rz;
call    0 returned 15
call    1 returned 15
call    2 returned 15
       33:  176:    } else if (LorR == 1) {
call    0 returned 15
call    1 returned 15
       18:  176-block  0
branch  2 taken 17 (fallthrough)
branch  3 taken 1
       17:  177:        bigint vertex_l = vertex->param.L;
       17:  177-block  0
call    0 returned 17
       17:  178:        bigint rz = vertex_l - Min;
call    0 returned 17
       17:  179:        vertex->param.sdv -= rz;
call    0 returned 17
call    1 returned 17
call    2 returned 17
       17:  180:    }
call    0 returned 17
call    1 returned 17
       33:  181:    Update_LR<vertex_type>(vertex, vertex->param.sdv);
       33:  181-block  0
call    0 returned 33
call    1 returned 33
call    2 returned 33
       33:  182:}
call    0 returned 33
call    1 returned 33
call    2 returned 33
call    3 returned 33
call    4 returned 33
call    5 returned 33
------------------
_ZN14Trees_Building11CompressionI7Node_DDEEvPT_l6biginti:
function _ZN14Trees_Building11CompressionI7Node_DDEEvPT_l6biginti called 5512 returned 100% blocks executed 100%
     5512:  156:void Trees_Building::Compression(vertex_type* vertex, int64_t H,
        -:  157:                 bigint path_sum, int LorR) noexcept {
     5512:  158:    if (vertex == nullptr) {
     5512:  158-block  0
branch  0 taken 2808 (fallthrough)
branch  1 taken 2704
     2808:  159:        return;
     2808:  159-block  0
        -:  160:    }
     5408:  161:    bigint two = bigint("2");
     2704:  161-block  0
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
call    3 returned 2704
     2704:  162:    bigint first = bigint(std::to_string(std::max(static_cast<int64_t>(0), H - 1)));
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
     2704:  163:    bigint second = bigint(std::to_string(std::max(static_cast<int64_t>(0), H - 1)));
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
     2704:  164:    Compression<vertex_type>(vertex->left, H - 1, path_sum - big_pow(two, first), 0);
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
call    3 returned 2704
call    4 returned 2704
     2704:  165:    Compression<vertex_type>(vertex->right, H - 1,path_sum + big_pow(two, second), 1);
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
call    3 returned 2704
call    4 returned 2704
     2704:  166:    vertex->param.sdv = to_bigint("0");
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
call    3 returned 2704
call    4 returned 2704
call    5 returned 2704
call    6 returned 2704
        -:  167:    // update X
     2704:  168:    Update_LR<vertex_type>(vertex);
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
call    3 returned 2704
call    4 returned 2704
call    5 returned 2704
call    6 returned 2704
     2704:  169:    bigint BIG_H = bigint(std::to_string(H));
call    0 returned 2704
call    1 returned 2704
     5408:  170:    bigint Max = big_pow(two, BIG_H) - bigint("1") + path_sum;
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
call    3 returned 2704
call    4 returned 2704
call    5 returned 2704
call    6 returned 2704
call    7 returned 2704
call    8 returned 2704
call    9 returned 2704
     5408:  171:    bigint Min = (big_pow(two, BIG_H) - bigint("1")) * bigint("-1") + path_sum;
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
call    3 returned 2704
call    4 returned 2704
call    5 returned 2704
call    6 returned 2704
call    7 returned 2704
call    8 returned 2704
call    9 returned 2704
call   10 returned 2704
call   11 returned 2704
call   12 returned 2704
call   13 returned 2704
call   14 returned 2704
call   15 returned 2704
call   16 returned 2704
call   17 returned 2704
     2704:  172:    if (LorR == 0) {
branch  0 taken 1144 (fallthrough)
branch  1 taken 1560
     1144:  173:        bigint vertex_r = vertex->param.R;
     1144:  173-block  0
call    0 returned 1144
     1144:  174:        bigint rz = Max - vertex_r;
call    0 returned 1144
     1144:  175:        vertex->param.sdv += rz;
call    0 returned 1144
call    1 returned 1144
call    2 returned 1144
     2704:  176:    } else if (LorR == 1) {
call    0 returned 1144
call    1 returned 1144
     1560:  176-block  0
branch  2 taken 1456 (fallthrough)
branch  3 taken 104
     1456:  177:        bigint vertex_l = vertex->param.L;
     1456:  177-block  0
call    0 returned 1456
     1456:  178:        bigint rz = vertex_l - Min;
call    0 returned 1456
     1456:  179:        vertex->param.sdv -= rz;
call    0 returned 1456
call    1 returned 1456
call    2 returned 1456
     1456:  180:    }
call    0 returned 1456
call    1 returned 1456
     2704:  181:    Update_LR<vertex_type>(vertex, vertex->param.sdv);
     2704:  181-block  0
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
     2704:  182:}
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
call    3 returned 2704
call    4 returned 2704
call    5 returned 2704
------------------
        -:  183:
        -:  184:template<typename vertex_type>
     5579:  185:void Trees_Building::LazyUpdates(vertex_type* vertex, bigint push) noexcept {
     5579:  186:    if (vertex == nullptr) {
     2842:  187:        return;
        -:  188:    }
     2737:  189:    bigint last_sdv = vertex->param.sdv;
     2737:  190:    vertex->param.sdv = vertex->param.sdv + push;
     2737:  191:    push = push + last_sdv;
     2737:  192:    LazyUpdates<vertex_type>(vertex->left, push);
     2737:  193:    LazyUpdates<vertex_type>(vertex->right, push);
     2737:  194:}
------------------
_ZN14Trees_Building11LazyUpdatesI8Node_AVLEEvPT_6bigint:
function _ZN14Trees_Building11LazyUpdatesI8Node_AVLEEvPT_6bigint called 67 returned 100% blocks executed 100%
       67:  185:void Trees_Building::LazyUpdates(vertex_type* vertex, bigint push) noexcept {
       67:  186:    if (vertex == nullptr) {
       67:  186-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 33
       34:  187:        return;
       34:  187-block  0
        -:  188:    }
       33:  189:    bigint last_sdv = vertex->param.sdv;
       33:  189-block  0
call    0 returned 33
       33:  190:    vertex->param.sdv = vertex->param.sdv + push;
call    0 returned 33
call    1 returned 33
call    2 returned 33
       33:  191:    push = push + last_sdv;
call    0 returned 33
call    1 returned 33
call    2 returned 33
       33:  192:    LazyUpdates<vertex_type>(vertex->left, push);
call    0 returned 33
call    1 returned 33
call    2 returned 33
       33:  193:    LazyUpdates<vertex_type>(vertex->right, push);
call    0 returned 33
call    1 returned 33
call    2 returned 33
       33:  194:}
call    0 returned 33
------------------
_ZN14Trees_Building11LazyUpdatesI7Node_DDEEvPT_6bigint:
function _ZN14Trees_Building11LazyUpdatesI7Node_DDEEvPT_6bigint called 5512 returned 100% blocks executed 100%
     5512:  185:void Trees_Building::LazyUpdates(vertex_type* vertex, bigint push) noexcept {
     5512:  186:    if (vertex == nullptr) {
     5512:  186-block  0
branch  0 taken 2808 (fallthrough)
branch  1 taken 2704
     2808:  187:        return;
     2808:  187-block  0
        -:  188:    }
     2704:  189:    bigint last_sdv = vertex->param.sdv;
     2704:  189-block  0
call    0 returned 2704
     2704:  190:    vertex->param.sdv = vertex->param.sdv + push;
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
     2704:  191:    push = push + last_sdv;
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
     2704:  192:    LazyUpdates<vertex_type>(vertex->left, push);
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
     2704:  193:    LazyUpdates<vertex_type>(vertex->right, push);
call    0 returned 2704
call    1 returned 2704
call    2 returned 2704
     2704:  194:}
call    0 returned 2704
------------------
        -:  195:
        -:  196:template<typename vertex_type, typename tree_type>
      105:  197:VERTEX<vertex_type>* Trees_Building::Build_Tree(tree_type& TREE, TREE_OPTIONS& TREE_OPT) noexcept {
      105:  198:    VERTEX<vertex_type>* root = nullptr;
        -:  199:    // ReCalc
      105:  200:    ReCalcHeight<vertex_type>(TREE.root);
      105:  201:    TREE.root->param.posX = bigint("0");
      105:  202:    ReCalcPosX<vertex_type>(TREE.root, (TREE.root->param.height - 1));
      105:  203:    ReBuildTree<vertex_type>(TREE.root);
      105:  204:    ReCalcSize(TREE.root);
        -:  205:    // ReCalc
      105:  206:    Compression<vertex_type>(TREE.root, (TREE.root->param.height - 1), bigint("0"));
      105:  207:    LazyUpdates<vertex_type>(TREE.root, bigint("0"));
      105:  208:    root = Tree_Building_InOrder<vertex_type>(TREE.root, root, {1250, 0},
        -:  209:                                              TREE_OPT);
        -:  210:    // 1250 - center of WINDOW_W
      105:  211:    return root;
        -:  212:}
