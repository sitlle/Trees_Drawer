        -:    0:Source:/home/yeawer/tree/BigInteger.h
        -:    0:Graph:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/BigInteger.cpp.gcno
        -:    0:Data:/home/yeawer/tree/cmake-build-debug-coverage/CMakeFiles/tree.dir/BigInteger.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include<bits/stdc++.h>
        -:    3:
        -:    4:#define big_abs bigint::_big_abs
        -:    5:#define big_max bigint::_big_max
        -:    6:#define big_min bigint::_big_min
        -:    7:#define big_pow bigint::_big_pow
        -:    8:#define big_sqrt bigint::_big_sqrt
        -:    9:#define big_log2 bigint::_big_log2
        -:   10:#define big_log10 bigint::_big_log10
        -:   11:#define big_logwithbase bigint::_big_logwithbase
        -:   12:#define big_antilog2 bigint::_big_antilog2
        -:   13:#define big_antilog10 bigint::_big_antilog10
        -:   14:#define big_swap bigint::_big_swap
        -:   15:#define big_reverse bigint::_big_reverse
        -:   16:#define big_gcd bigint::_big_gcd
        -:   17:#define big_lcm bigint::_big_lcm
        -:   18:#define big_fact bigint::_big_fact
        -:   19:#define big_isPrime bigint::_big_isPrime
        -:   20:#define big_isPalindrome bigint::_big_isPalindrome
        -:   21:#define to_bigint bigint::_to_bigint
        -:   22:
        -:   23:// Big Integer Class
        -:   24:
        -:   25:class bigint {
        -:   26:private:
        -:   27:    std::string str;
        -:   28:    // Function Definitions for Internal Uses
        -:   29:
        -:   30:    static std::string trim(std::string);
        -:   31:    static std::string add(std::string, std::string);
        -:   32:    static std::string subtract(std::string, std::string);
        -:   33:    static std::string multiply(std::string, std::string);
        -:   34:    static std::string divide(std::string, std::string);
        -:   35:
        -:   36:    static std::string mod(std::string, std::string);
        -:   37:    static std::string shortDivide(std::string, unsigned long long int);
        -:   38:    static std::string maximum(std::string, std::string);
        -:   39:    static bool is_maximum(std::string, std::string);
        -:   40:    static bool is_strictlyMaximum(std::string, std::string);
        -:   41:    static std::string minimum(std::string, std::string);
        -:   42:    static bool is_minimum(std::string, std::string);
        -:   43:    static bool is_strictlyMinimum(std::string, std::string);
        -:   44:    static bool is_bigint(std::string);
        -:   45:
        -:   46:    // Public Property
        -:   47:
        -:   48:    static std::string abs(std::string);
        -:   49:    static std::string pow(std::string, std::string);
        -:   50:    static std::string sqrt(std::string);
        -:   51:    static std::string log2(std::string);
        -:   52:    static std::string log10(std::string);
        -:   53:    static std::string logwithbase(std::string, std::string);
        -:   54:    static std::string antilog2(std::string);
        -:   55:    static std::string antilog10(std::string);
        -:   56:    static void swap(std::string&, std::string&);
        -:   57:    static std::string reverse(std::string);
        -:   58:    static std::string gcd(std::string, std::string);
        -:   59:    static std::string lcm(std::string, std::string);
        -:   60:    static std::string fact(std::string);
        -:   61:    static bool isPalindrome(std::string);
        -:   62:    static bool isPrime(std::string);
        -:   63:
        -:   64:
        -:   65:public:
function _ZN6bigintD2Ev called 0 returned 0% blocks executed 0%
    #####:   66:    ~bigint() = default;
    %%%%%:   66-block  0
call    0 never executed
        -:   67:    static int64_t to_int(bigint ans) {
        -:   68:        std::cout << ans.str << '\n';
        -:   69:        int64_t res = 0;
        -:   70:        int64_t power = 1;
        -:   71:        if (ans.str[0] == '-') {
        -:   72:            power *= -1;
        -:   73:        }
        -:   74:        for (int i = (int)ans.str.size() - 1; i >= 0; --i) {
        -:   75:            if (ans.str[i] == '-') {
        -:   76:                continue;
        -:   77:            }
        -:   78:            res += int(ans.str[i] - '0') * power;
        -:   79:            power *= 10;
        -:   80:        }
        -:   81:        std::cout << res << '\n';
        -:   82:        return res;
        -:   83:    }
        -:   84:    // Constructors for big int.
        -:   85:    bigint() {
        -:   86:        str = '0';  //default value
        -:   87:    }
function _ZN6bigintC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   88:    bigint(std::string s) {
    %%%%%:   88-block  0
call    0 never executed
    #####:   89:        if(!is_bigint(s))
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   89-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   89-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:   89-block  2
call    9 never executed
    $$$$$:   89-block  3
    #####:   90:            throw std::runtime_error("Invalid Big Integer has been fed.");   // if the input string is not valid number.
    %%%%%:   90-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   90-block  1
call    4 never executed
    $$$$$:   90-block  2
call    5 never executed
    #####:   91:        str = s;
    %%%%%:   91-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   92:    }
    %%%%%:   92-block  0
    $$$$$:   92-block  1
call    0 never executed
        -:   93:    bigint(long long int n) {
        -:   94:        str = std::to_string(n);
        -:   95:    }
        -:   96:    bigint(int n) {
        -:   97:        str = std::to_string(n);
        -:   98:    }
        -:   99:    bigint(long int n) {
        -:  100:        str = std::to_string(n);
        -:  101:    }
        -:  102:    bigint(const bigint &n) {
        -:  103:        str = n.str;
        -:  104:    }
        -:  105:
        -:  106:    // operator overloading for output stream {<<}
        -:  107:    friend std::ostream &operator << (std::ostream& stream, const bigint &n) {
        -:  108:        stream << n.str;
        -:  109:        return stream;
        -:  110:    }
        -:  111:
        -:  112:    // operator overloading for input stream {>>}
        -:  113:    friend std::istream &operator >> (std::istream& stream, bigint &n) {
        -:  114:        stream >> n.str;
        -:  115:        return stream;
        -:  116:    }
        -:  117:
        -:  118:    /* Operator {+} Overloadings, for different kind of
        -:  119:    parameter for the programmer's convinience  */
        -:  120:
        -:  121:    bigint operator + (bigint const &n) {
        -:  122:        bigint ans;
        -:  123:        ans.str = add(str, n.str);
        -:  124:        return ans;
        -:  125:    }
        -:  126:    friend bigint operator + (bigint const &n1, int n2) {
        -:  127:        bigint ans;
        -:  128:        ans.str = add(n1.str, std::to_string(n2));
        -:  129:        return ans;
        -:  130:    }
        -:  131:    friend bigint operator + (int n1, bigint const &n2) {
        -:  132:        bigint ans;
        -:  133:        ans.str = add(n2.str, std::to_string(n1));
        -:  134:        return ans;
        -:  135:    }
        -:  136:    friend bigint operator + (bigint const &n1, long int n2) {
        -:  137:        bigint ans;
        -:  138:        ans.str = add(n1.str, std::to_string(n2));
        -:  139:        return ans;
        -:  140:    }
        -:  141:    friend bigint operator + (long int n1, bigint const &n2) {
        -:  142:        bigint ans;
        -:  143:        ans.str = add(n2.str, std::to_string(n1));
        -:  144:        return ans;
        -:  145:    }
        -:  146:    friend bigint operator + (bigint const &n1, long long int n2) {
        -:  147:        bigint ans;
        -:  148:        ans.str = add(n1.str, std::to_string(n2));
        -:  149:        return ans;
        -:  150:    }
        -:  151:    friend bigint operator + (long long int n1, bigint const &n2) {
        -:  152:        bigint ans;
        -:  153:        ans.str = add(n2.str, std::to_string(n1));
        -:  154:        return ans;
        -:  155:    }
        -:  156:
        -:  157:    // Extra shortcut feature
        -:  158:
        -:  159:    bigint& operator += (bigint const n) {
        -:  160:        (*this).str = add((*this).str, n.str);
        -:  161:        return (*this);
        -:  162:    }
        -:  163:
        -:  164:
        -:  165:
        -:  166:    /* Operator {-} Overloadings, for different kind of
        -:  167:    parameter for the programmer's convinience  */
        -:  168:
        -:  169:    bigint operator - (bigint const &n) {
        -:  170:        bigint ans;
        -:  171:        ans.str = subtract(str, n.str);
        -:  172:        return ans;
        -:  173:    }
        -:  174:
        -:  175:    friend bigint operator - (bigint const &n1, int n2) {
        -:  176:        bigint ans;
        -:  177:        ans.str = subtract(n1.str, std::to_string(n2));
        -:  178:        return ans;
        -:  179:    }
        -:  180:    friend bigint operator - (int n1, bigint const &n2) {
        -:  181:        bigint ans;
        -:  182:        ans.str = subtract(std::to_string(n1), n2.str);
        -:  183:        return ans;
        -:  184:    }
        -:  185:    friend bigint operator - (bigint const &n1, long int n2) {
        -:  186:        bigint ans;
        -:  187:        ans.str = subtract(n1.str, std::to_string(n2));
        -:  188:        return ans;
        -:  189:    }
        -:  190:    friend bigint operator - (long int n1, bigint const &n2) {
        -:  191:        bigint ans;
        -:  192:        ans.str = subtract(std::to_string(n1), n2.str);
        -:  193:        return ans;
        -:  194:    }
        -:  195:    friend bigint operator - (bigint const &n1, long long int n2) {
        -:  196:        bigint ans;
        -:  197:        ans.str = subtract(n1.str, std::to_string(n2));
        -:  198:        return ans;
        -:  199:    }
        -:  200:    friend bigint operator - (long long int n1, bigint const &n2) {
        -:  201:        bigint ans;
        -:  202:        ans.str = subtract(std::to_string(n1), n2.str);
        -:  203:        return ans;
        -:  204:    }
        -:  205:
        -:  206:    // Extra shortcut feature
        -:  207:
        -:  208:    bigint& operator -= (bigint const n) {
        -:  209:        (*this).str = subtract((*this).str, n.str);
        -:  210:        return (*this);
        -:  211:    }
        -:  212:
        -:  213:    /* Operator {*} Overloadings, for different kind of
        -:  214:    parameter for the programmer's convinience  */
        -:  215:
        -:  216:    bigint operator * (bigint const &n) {
        -:  217:        bigint ans;
        -:  218:        ans.str = multiply(str, n.str);
        -:  219:        return ans;
        -:  220:    }
        -:  221:    friend bigint operator * (bigint const &n1, int n2) {
        -:  222:        bigint ans;
        -:  223:        ans.str = multiply(n1.str, std::to_string(n2));
        -:  224:        return ans;
        -:  225:    }
        -:  226:    friend bigint operator * (int n1, bigint const &n2) {
        -:  227:        bigint ans;
        -:  228:        ans.str = multiply(std::to_string(n1), n2.str);
        -:  229:        return ans;
        -:  230:    }
        -:  231:    friend bigint operator * (bigint const &n1, long int n2) {
        -:  232:        bigint ans;
        -:  233:        ans.str = multiply(n1.str, std::to_string(n2));
        -:  234:        return ans;
        -:  235:    }
        -:  236:    friend bigint operator * (long int n1, bigint const &n2) {
        -:  237:        bigint ans;
        -:  238:        ans.str = multiply(std::to_string(n1), n2.str);
        -:  239:        return ans;
        -:  240:    }
        -:  241:    friend bigint operator * (bigint const &n1, long long int n2) {
        -:  242:        bigint ans;
        -:  243:        ans.str = multiply(n1.str, std::to_string(n2));
        -:  244:        return ans;
        -:  245:    }
        -:  246:    friend bigint operator * (long long int n1, bigint const &n2) {
        -:  247:        bigint ans;
        -:  248:        ans.str = multiply(std::to_string(n1), n2.str);
        -:  249:        return ans;
        -:  250:    }
        -:  251:    // Extra shortcut feature
        -:  252:
        -:  253:    bigint& operator *= (bigint const n) {
        -:  254:        (*this).str = multiply((*this).str, n.str);
        -:  255:        return (*this);
        -:  256:    }
        -:  257:
        -:  258:    /* Operator {/} Overloadings, for different kind of
        -:  259:    parameter for the programmer's convinience  */
        -:  260:
        -:  261:    bigint operator / (bigint const &n) {
        -:  262:        bigint ans;
        -:  263:        ans.str = divide(str, n.str);
        -:  264:        return ans;
        -:  265:    }
        -:  266:    friend bigint operator / (bigint const &n1, int n2) {
        -:  267:        bigint ans;
        -:  268:        ans.str = divide(n1.str, std::to_string(n2));
        -:  269:        return ans;
        -:  270:    }
        -:  271:    friend bigint operator / (int n1, bigint const &n2) {
        -:  272:        bigint ans;
        -:  273:        ans.str = divide(std::to_string(n1), n2.str);
        -:  274:        return ans;
        -:  275:    }
        -:  276:    friend bigint operator / (bigint const &n1, long int n2) {
        -:  277:        bigint ans;
        -:  278:        ans.str = divide(n1.str, std::to_string(n2));
        -:  279:        return ans;
        -:  280:    }
        -:  281:    friend bigint operator / (long int n1, bigint const &n2) {
        -:  282:        bigint ans;
        -:  283:        ans.str = divide(std::to_string(n1), n2.str);
        -:  284:        return ans;
        -:  285:    }
        -:  286:    friend bigint operator / (bigint const &n1, long long int n2) {
        -:  287:        bigint ans;
        -:  288:        ans.str = divide(n1.str, std::to_string(n2));
        -:  289:        return ans;
        -:  290:    }
        -:  291:    friend bigint operator / (long long int n1, bigint const &n2) {
        -:  292:        bigint ans;
        -:  293:        ans.str = divide(std::to_string(n1), n2.str);
        -:  294:        return ans;
        -:  295:    }
        -:  296:
        -:  297:    // Extra shortcut feature
        -:  298:
        -:  299:    bigint& operator /= (bigint const n) {
        -:  300:        (*this).str = divide((*this).str, n.str);
        -:  301:        return (*this);
        -:  302:    }
        -:  303:
        -:  304:    /* Operator {%} Overloadings, for different kind of
        -:  305:    parameter for the programmer's convinience  */
        -:  306:
        -:  307:    bigint operator % (bigint const &n) {
        -:  308:        bigint ans;
        -:  309:        ans.str = mod(str, n.str);
        -:  310:        return ans;
        -:  311:    }
        -:  312:    friend bigint operator % (bigint const &n1, int n2) {
        -:  313:        bigint ans;
        -:  314:        ans.str = mod(n1.str, std::to_string(n2));
        -:  315:        return ans;
        -:  316:    }
        -:  317:    friend bigint operator % (int n1, bigint const &n2) {
        -:  318:        bigint ans;
        -:  319:        ans.str = mod(std::to_string(n1), n2.str);
        -:  320:        return ans;
        -:  321:    }
        -:  322:    friend bigint operator % (bigint const &n1, long int n2) {
        -:  323:        bigint ans;
        -:  324:        ans.str = mod(n1.str, std::to_string(n2));
        -:  325:        return ans;
        -:  326:    }
        -:  327:    friend bigint operator % (long int n1, bigint const &n2) {
        -:  328:        bigint ans;
        -:  329:        ans.str = mod(std::to_string(n1), n2.str);
        -:  330:        return ans;
        -:  331:    }
        -:  332:    friend bigint operator % (bigint const &n1, long long int n2) {
        -:  333:        bigint ans;
        -:  334:        ans.str = mod(n1.str, std::to_string(n2));
        -:  335:        return ans;
        -:  336:    }
        -:  337:    friend bigint operator % (long long int n1, bigint const &n2) {
        -:  338:        bigint ans;
        -:  339:        ans.str = mod(std::to_string(n1), n2.str);
        -:  340:        return ans;
        -:  341:    }
        -:  342:
        -:  343:    // Extra shortcut feature
        -:  344:
        -:  345:    bigint& operator %= (bigint const n) {
        -:  346:        (*this).str = mod((*this).str, n.str);
        -:  347:        return (*this);
        -:  348:    }
        -:  349:
        -:  350:    //-------------------------------------------------
        -:  351:    //------------Increment and Decrement--------------
        -:  352:    //-------------------------------------------------
        -:  353:
        -:  354:    /* Operator {++} Overloadings
        -:  355:    for the pre incremention  */
        -:  356:    bigint& operator ++ () {
        -:  357:        (*this).str = add((*this).str, "1");
        -:  358:        return (*this);
        -:  359:    }
        -:  360:    /* Operator {++} Overloadings
        -:  361:    for the post incremention  */
        -:  362:    bigint operator ++ (int) {
        -:  363:        (*this).str = add((*this).str, "1");
        -:  364:        return (*this);
        -:  365:    }
        -:  366:
        -:  367:    /* Operator {--} Overloadings
        -:  368:    for the pre decremention  */
        -:  369:    bigint& operator -- () {
        -:  370:        (*this).str = subtract((*this).str, "1");
        -:  371:        return (*this);
        -:  372:    }
        -:  373:
        -:  374:    /* Operator {--} Overloadings
        -:  375:    for the post incremention  */
        -:  376:    bigint operator -- (int) {
        -:  377:        (*this).str = subtract((*this).str, "1");
        -:  378:        return (*this);
        -:  379:    }
        -:  380:
        -:  381:    //-------------------------------------------------
        -:  382:    //------------Conditional Operators----------------
        -:  383:    //-------------------------------------------------
        -:  384:
        -:  385:    /* Operator {>} Overloadings, for different kind of
        -:  386:    parameter for the programmer's convinience  */
        -:  387:
        -:  388:    bool operator > (bigint const &n) {
        -:  389:        return is_strictlyMaximum(str, n.str);
        -:  390:    }
        -:  391:    friend bool operator > (bigint const &n1, int n2) {
        -:  392:        return is_strictlyMaximum(n1.str, std::to_string(n2));
        -:  393:    }
        -:  394:    friend bool operator > (int n1, bigint const &n2) {
        -:  395:        return is_strictlyMaximum(std::to_string(n1), n2.str);
        -:  396:    }
        -:  397:    friend bool operator > (bigint const &n1, long int n2) {
        -:  398:        return is_strictlyMaximum(n1.str, std::to_string(n2));
        -:  399:    }
        -:  400:    friend bool operator > (long int n1, bigint const &n2) {
        -:  401:        return is_strictlyMaximum(std::to_string(n1), n2.str);
        -:  402:    }
        -:  403:    friend bool operator > (bigint const &n1, long long int n2) {
        -:  404:        return is_strictlyMaximum(n1.str, std::to_string(n2));
        -:  405:    }
        -:  406:    friend bool operator > (long long int n1, bigint const &n2) {
        -:  407:        return is_strictlyMaximum(std::to_string(n1), n2.str);
        -:  408:    }
        -:  409:
        -:  410:    /* Operator {<} Overloadings, for different kind of
        -:  411:    parameter for the programmer's convinience  */
        -:  412:
        -:  413:    bool operator < (bigint const &n) {
        -:  414:        return is_strictlyMinimum(str, n.str);
        -:  415:    }
        -:  416:    friend bool operator < (bigint const &n1, int n2) {
        -:  417:        return is_strictlyMinimum(n1.str, std::to_string(n2));
        -:  418:    }
        -:  419:    friend bool operator < (int n1, bigint const &n2) {
        -:  420:        return is_strictlyMinimum(std::to_string(n1), n2.str);
        -:  421:    }
        -:  422:    friend bool operator < (bigint const &n1, long int n2) {
        -:  423:        return is_strictlyMinimum(n1.str, std::to_string(n2));
        -:  424:    }
        -:  425:    friend bool operator < (long int n1, bigint const &n2) {
        -:  426:        return is_strictlyMinimum(std::to_string(n1), n2.str);
        -:  427:    }
        -:  428:    friend bool operator < (bigint const &n1, long long int n2) {
        -:  429:        return is_strictlyMinimum(n1.str, std::to_string(n2));
        -:  430:    }
        -:  431:    friend bool operator < (long long int n1, bigint const &n2) {
        -:  432:        return is_strictlyMinimum(std::to_string(n1), n2.str);
        -:  433:    }
        -:  434:
        -:  435:    /* Operator {>=} Overloadings, for different kind of
        -:  436:    parameter for the programmer's convinience  */
        -:  437:
        -:  438:    bool operator >= (bigint const &n) {
        -:  439:        return is_maximum(str, n.str);
        -:  440:    }
        -:  441:    friend bool operator >= (bigint const &n1, int n2) {
        -:  442:        return is_maximum(n1.str, std::to_string(n2));
        -:  443:    }
        -:  444:    friend bool operator >= (int n1, bigint const &n2) {
        -:  445:        return is_maximum(std::to_string(n1), n2.str);
        -:  446:    }
        -:  447:    friend bool operator >= (bigint const &n1, long int n2) {
        -:  448:        return is_maximum(n1.str, std::to_string(n2));
        -:  449:    }
        -:  450:    friend bool operator >= (long int n1, bigint const &n2) {
        -:  451:        return is_maximum(std::to_string(n1), n2.str);
        -:  452:    }
        -:  453:    friend bool operator >= (bigint const &n1, long long int n2) {
        -:  454:        return is_maximum(n1.str, std::to_string(n2));
        -:  455:    }
        -:  456:    friend bool operator >= (long long int n1, bigint const &n2) {
        -:  457:        return is_maximum(std::to_string(n1), n2.str);
        -:  458:    }
        -:  459:
        -:  460:    /* Operator {<=} Overloadings, for different kind of
        -:  461:    parameter for the programmer's convinience  */
        -:  462:
        -:  463:    bool operator <= (bigint const &n) {
        -:  464:        return is_minimum(str, n.str);
        -:  465:    }
        -:  466:    friend bool operator <= (bigint const &n1, int n2) {
        -:  467:        return is_minimum(n1.str, std::to_string(n2));
        -:  468:    }
        -:  469:    friend bool operator <= (int n1, bigint const &n2) {
        -:  470:        return is_minimum(std::to_string(n1), n2.str);
        -:  471:    }
        -:  472:    friend bool operator <= (bigint const &n1, long int n2) {
        -:  473:        return is_minimum(n1.str, std::to_string(n2));
        -:  474:    }
        -:  475:    friend bool operator <= (long int n1, bigint const &n2) {
        -:  476:        return is_minimum(std::to_string(n1), n2.str);
        -:  477:    }
        -:  478:    friend bool operator <= (bigint const &n1, long long int n2) {
        -:  479:        return is_minimum(n1.str, std::to_string(n2));
        -:  480:    }
        -:  481:    friend bool operator <= (long long int n1, bigint const &n2) {
        -:  482:        return is_minimum(std::to_string(n1), n2.str);
        -:  483:    }
        -:  484:
        -:  485:
        -:  486:    /* Operator {==} Overloadings, for different kind of
        -:  487:    parameter for the programmer's convinience  */
        -:  488:
        -:  489:    bool operator ==(bigint const &n) {
        -:  490:        return (*this).str == n.str;
        -:  491:    }
        -:  492:    friend bool operator == (bigint const &n1, int n2) {
        -:  493:        return n1.str == std::to_string(n2);
        -:  494:    }
        -:  495:    friend bool operator == (int n1, bigint const &n2) {
        -:  496:        return std::to_string(n1) == n2.str;
        -:  497:    }
        -:  498:    friend bool operator == (bigint const &n1, long int n2) {
        -:  499:        return n1.str == std::to_string(n2);
        -:  500:    }
        -:  501:    friend bool operator == (long int n1, bigint const &n2) {
        -:  502:        return std::to_string(n1) == n2.str;
        -:  503:    }
        -:  504:    friend bool operator == (bigint const &n1, long long int n2) {
        -:  505:        return n1.str == std::to_string(n2);
        -:  506:    }
        -:  507:    friend bool operator == (long long int n1, bigint const &n2) {
        -:  508:        return std::to_string(n1) == n2.str;
        -:  509:    }
        -:  510:
        -:  511:
        -:  512:    /* Operator {!=} Overloadings, for different kind of
        -:  513:    parameter for the programmer's convinience  */
        -:  514:
        -:  515:    bool operator !=(bigint const &n) {
        -:  516:        return (*this).str != n.str;
        -:  517:    }
        -:  518:    friend bool operator != (bigint const &n1, int n2) {
        -:  519:        return n1.str != std::to_string(n2);
        -:  520:    }
        -:  521:    friend bool operator != (int n1, bigint const &n2) {
        -:  522:        return std::to_string(n1) != n2.str;
        -:  523:    }
        -:  524:    friend bool operator != (bigint const &n1, long int n2) {
        -:  525:        return n1.str != std::to_string(n2);
        -:  526:    }
        -:  527:    friend bool operator != (long int n1, bigint const &n2) {
        -:  528:        return std::to_string(n1) != n2.str;
        -:  529:    }
        -:  530:    friend bool operator != (bigint const &n1, long long int n2) {
        -:  531:        return n1.str != std::to_string(n2);
        -:  532:    }
        -:  533:    friend bool operator != (long long int n1, bigint const &n2) {
        -:  534:        return std::to_string(n1) != n2.str;
        -:  535:    }
        -:  536:
        -:  537:    //-----------------------------------------------------------
        -:  538:    //--------Function Definitions for External Uses-------------
        -:  539:    //-----------------------------------------------------------
        -:  540:
        -:  541:
        -:  542:    static bigint _big_max(bigint &a, bigint &b) {     // returns the maximum value between two Big Integers.
        -:  543:        bigint ans;
        -:  544:        ans.str = maximum(a.str, b.str);
        -:  545:        return ans;
        -:  546:    }
        -:  547:    static bigint _big_min(bigint &a, bigint &b) {      // returns the minimum value between two Big Integers.
        -:  548:        bigint ans;
        -:  549:        ans.str = minimum(a.str, b.str);
        -:  550:        return ans;
        -:  551:    }
        -:  552:    static bigint _big_abs(bigint &a) {                 // returns the absolute value of Big Integer.
        -:  553:        bigint ans;
        -:  554:        ans.str = abs(a.str);
        -:  555:        return ans;
        -:  556:    }
        -:  557:    static bigint _big_pow(bigint a, bigint b) {      // returns the power value between two Big Integers i.e., a^b, ^ -> power
        -:  558:        bigint ans;
        -:  559:        ans.str = pow(a.str, b.str);
        -:  560:        return ans;
        -:  561:    }
        -:  562:    static bigint _big_sqrt(bigint &a) {                // returns the square root value of Big Integer.
        -:  563:        bigint ans;
        -:  564:        ans.str = sqrt(a.str);
        -:  565:        return ans;
        -:  566:    }
        -:  567:    static bigint _big_log2(bigint &a) {                // returns the log of Big Integer to the base of 2.
        -:  568:        bigint ans;
        -:  569:        ans.str = log2(a.str);
        -:  570:        return ans;
        -:  571:    }
        -:  572:    static bigint _big_log10(bigint &a) {               // returns the log of Big Integer to the base of 10.
        -:  573:        bigint ans;
        -:  574:        ans.str = log10(a.str);
        -:  575:        return ans;
        -:  576:    }
        -:  577:    static bigint _big_logwithbase(bigint &a, bigint &b) {  // returns the log of Big Integer(a) to the base of (b).
        -:  578:        bigint ans;
        -:  579:        ans.str = logwithbase(a.str, b.str);
        -:  580:        return ans;
        -:  581:    }
        -:  582:    static bigint _big_antilog2(bigint &a) {        // returns the antilog of Big Integer to the base of 2.
        -:  583:        bigint ans;
        -:  584:        ans.str = antilog2(a.str);
        -:  585:        return ans;
        -:  586:    }
        -:  587:    static bigint _big_antilog10(bigint &a) {       // returns the antilog of Big Integer to the base of 10.
        -:  588:        bigint ans;
        -:  589:        ans.str = antilog10(a.str);
        -:  590:        return ans;
        -:  591:    }
        -:  592:    static void _big_swap(bigint &a, bigint &b) {     // swaps the two Big Integers.
        -:  593:        swap(a.str, b.str);
        -:  594:    }
        -:  595:    static bigint _big_reverse(bigint &a) {             //Reverses the Big Integer.
        -:  596:        bigint ans;
        -:  597:        ans.str = reverse(a.str);
        -:  598:        return ans;
        -:  599:    }
        -:  600:    static bigint _big_gcd(bigint &a, bigint &b) {         // returns the gcd of Big Integers a and b.
        -:  601:        bigint ans;
        -:  602:        ans.str = gcd(a.str, b.str);
        -:  603:        return ans;
        -:  604:    }
        -:  605:    static bigint _big_lcm(bigint &a, bigint &b) {          // returns the lcm of Big Integers a and b.
        -:  606:        bigint ans;
        -:  607:        ans.str = lcm(a.str, b.str);
        -:  608:        return ans;
        -:  609:    }
        -:  610:    static bigint _big_fact(bigint &a) {                    // returns the factorial of Big Integer.
        -:  611:        bigint ans;
        -:  612:        ans.str = fact(a.str);
        -:  613:        return ans;
        -:  614:    }
        -:  615:    static bool _big_isPalindrome(bigint &a) {              // Check if the Big Integer is Palindromic Integer.
        -:  616:        return isPalindrome(a.str);
        -:  617:    }
        -:  618:    static bool _big_isPrime(bigint &a) {                   // Check if the Big Integer is Prime Integer.
        -:  619:        return isPrime(a.str);
        -:  620:    }
        -:  621:
        -:  622:    // to biginteger functions
        -:  623:
        -:  624:    static bigint _to_bigint(std::string s) {
        -:  625:        bigint ans;
        -:  626:        ans.str = s;
        -:  627:        return ans;
        -:  628:    }
        -:  629:    static bigint _to_bigint(int n) {
        -:  630:        bigint ans;
        -:  631:        ans.str = std::to_string(n);
        -:  632:        return ans;
        -:  633:    }
        -:  634:    static bigint _to_bigint(long int n) {
        -:  635:        bigint ans;
        -:  636:        ans.str = std::to_string(n);
        -:  637:        return ans;
        -:  638:    }
        -:  639:    static bigint _to_bigint(long long int n) {
        -:  640:        bigint ans;
        -:  641:        ans.str = std::to_string(n);
        -:  642:        return ans;
        -:  643:    }
        -:  644:
        -:  645:};
